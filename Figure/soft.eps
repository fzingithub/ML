%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9R3A0E.tmp.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: Administrator
%%CreationDate: 2018/10/9, 14:51:36
%%BoundingBox: -1 0 355 129
%%HiResBoundingBox: 0 0 354.0473 128.6930
%%CropBox: 0 0 354.0473 128.6930
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 778 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2018-10-09T14:50:37+08:00"
   xmp:CreateDate="2018-10-09T14:50:37+08:00"
   xmp:MetadataDate="2018-10-09T14:50:37+08:00"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:c48ce803-3d34-49b4-a585-c38d69f6aa6a"
   xmpMM:InstanceID="uuid:6650b035-40d5-40f5-95e2-42db22c861c6"
   pdf:Producer="GNU Ghostscript 7.07"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -128.693 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 128.693 li
354.047 128.693 li
354.047 0 li
cp
clp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: GFNBAA+CMR12~15 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GFNBAA+CMR12~15 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 34 /quotedblright put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 57 /nine put
dup 65 /A put
dup 70 /F put
dup 77 /M put
dup 83 /S put
dup 84 /T put
dup 86 /V put
dup 87 /W put
dup 92 /quotedblleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
def
/FontBBox {-34 -251 988 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 683 704 431 446 665 675] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [29] def
/StdVW [65] def
/StemSnapH [20 29] def
/StemSnapV [65 81] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
42 dict dup begin
/fi <1C60D8A8C9B08A95C885DB2659C87211BC4EDA918D7FF4F9A5A9E2D6343
A2103A333988E43A37CD05BFD254D7DD695089755AC446BC49FAC10F108683D5
901C03FCA4B255740E6838E4C2F371F9C44EC9A34886EA0586400188491AE193
835F209EECAE788C4DA354BAFE91DF17C7C294EC184C19CEAA382BE67F572A3C
C7B0A58458C4A6BE217EB489FCBCF79E6A47A6AB1F0155A8D1B1B52D130C9735
BE266804FFD3721C3641855DC538ADC6B8190B43527AA63F48E208723BA> |-
/quotedblright <1C60D8A8C9B08A95A31CD7D9F217DF6EE8F866EF1F1A6763
68186A69421A696A292FA31B64EEE490322AEEC485617E0675D5C6318830C69A
0F67FA16106B041069F7163E4F5D330BE141A81FFE1582E195B415F707E48AEE
5C5DD691A653CCE5582FA7C19AE5507DB44A561CDA9E9B5B1FD56A0848CFD47C
8435FEDD1154DE5E6618CD196BB59C07078A14CB5FA3F350> |-
/quoteright <1C60D8A8C9B08A9576E61A968506719D016166CCDCD699D74C1
3894BF9617711A629B6F3C515DF2C278B4868925BBD544EE59D0C8792D1EA1D7
97FC8FD8C77D973769B1EE195462E40266A617EC27369CE02DE94> |-
/parenleft <1C60D8A8C9B08A9588E3899D564A665F0282C81886D479C3BF57
C34F2516FF3F71A0A59FA044EE758A2838385AD6687B1F266EBDBB9639683528
A1C88C575ADEA2B77522F744A30CAFCECE3DED78EE6E43BA5FDDCAA687D1EA2F
A4877C7825DF45C6581285B5FFEFF8B210> |-
/parenright <1C60D8A8C9B08A9588E3899D564A665F0282C81886D405386EF
5EBFD49A5BC21F5E8540EA7EB5D5C15BD39D3CD04837999C0305684169B80359
A5B68867EFF5D0A1BD1CBA137790A62A38A948EF8FDA91164FA32E7B073C0027
F7E6DD7D05548CDE1BA1BD92D43716E8928AAC901> |-
/comma <1C60D8A8C9B08A9576E61A96850672D189A5C57799069A34E49D37EB
C621CF771E10E1FFC91D5349041C8A9FF3A1E6DBE8CA9BD704C646C3F3BDFEED
6C79F068803EDDBB34ACD54F9C53F55FD64412D6ECAFBD4CFC462ED4F1> |-
/hyphen <1C60D8A8C9B08A9563F93DCB793945E380800117DAC2639E8FF13F8
AAEEF2798CF0EB585> |-
/period <1C60D8A8C9B08A9576E61A96850602D841B4E7DDDF6FA1430C19AFE
AAF901710118B36D398989AA1F275B2EE7381> |-
/one <1C60D8A8C9B08A95A31CD7D9F217AC8F207B63EDE68008AAFCF77ADA2B
E4DA353A607E4871193CBEADE0C722DD14762B9DADE61ED499A6E9781D24351F
5FD35F78EB0851110FD507D4B0DB4D2722AC47253541404785A438FBBD2AAB> |-
/nine <1C60D8A8C9B08A95A31CD7D9F217516056966647F0F6617084B5DB0B6
2E91B2335CF76192324AD134D15D86F2F60FF12AD5D2CA44A2865874EBB18DAD
C35BDD88F5575F047D1FD4213092F544A145A7B6AC90880B7CF5A1028D2494D8
0DAFA11D0E7DE8DCBF7C0005276429F5589A225DAB075E306FD0470ACDDBD9F3
97A4E003D32655ACC0036B34631EFB555A88768619818B6453ABFB398B814E75
D05ED86CC435CEE41F8FF> |-
/A <1C60D8A8C9B08A9450211CEE5BEC0624AAD8A46261F8E129CCA2E8D48639
F40C3E6AF96CDC7565F988EFE865FAC0018DF0222B875BB1790B33740B3D57AD
979476375CF819753A46EA2F6D4EEA3B88146417A472BA539A45856DF8A08E60
CB8BE5EC4864588E7C3F813A7530C0D00BEBF595B39826E7CE63A7E0B1723AE6
E27FF7F98C0F49228D3B4C153703B8E9AD35395BF3D087641E0B> |-
/F <1C60D8A8C9B672D450D6DAA518819E227C353EBC2D45D3789C86CA91122C
AC3E4DC34C2EBD6E25759C8FC9B38D85421ED739F470A45F8527EA23A5DBA825
BA06AC3CEE3A72FB94CBAC0C700EEDB4D16FF98A7661C112E83DB9E45B17E0CB
28CDB6E2B74977B27BA29CB488E714FE78050E6DF7E2ACA0CE53E45B06B6BB0F> |-
/M <1C60D8A8C9B08A94108625EEF8A2852369F2025785B6033804A68A683468
FDFD61BD6C2D8A677AFAF56ABFB88F15FD2AE42021B6243150ED8DB2ABC4C972
7C7CDE48BC9A75B04D6A3C1F60C7E05E2A3B1D09879678D6793C97D203306589
78213A21E3C6928CB0BBE4062486C981BF2AB5651220CE48FBBFEF177CD1AAA6
6AF747186B960FD316878433E23BFDB71B0815BFA8A6B176BD83C83C4F624D9A
B0C1A8A49C8E72E09A72B495E16DF4182381C195> |-
/S <1C60D8A8C9B08A95C885DB2659C88FB4AA9A4C6C9CB97707A96DF086C07A
C43DF1EDD1D9A51F143EA0329E8494F5D7713BDE80FA206BFEC7D7CC31F16806
17796ED5D5C04E466600C8C115EA34214A081A621959D4A454CF2A8989A45090
ED1FEB22E0E6D59324E40521152BEDA8AFB0116B0A0F81A46B31AD13BA23D45F
CB990169EC4DC764A12DD21B7A3194363DBD96CEF4A5D42C098E1F06DA2B330D
746FE85D15C82096775C67935A76E4861796D882D8997AA04FF926B27AA01DD9
70C3E3FA79D081F78219430CF138DBFA3BD3> |-
/T <1C60D8A8C9B08A945A96BCDB3098345AF8DEDC28F1E003ACCE231C386BE2
597C2DC3586DD9C1C506DD86C3F14DBE6741B41F9E7CCE9843FE371029502E17
4A9998D837520F867F916ED1B2FF21FD2F03E1C54793DAA3A77330827805C10D
B0BB5ACA5A727AC5D87997BF654C74F50976B841667BF178C35A39704B4082E2
73> |-
/V <1C60D8A8C9B08A9450211CEE5BECFBBB35FDA4591EB52E28347C2E909B5F
FC7EE23EC8ED91A9B2E319E8E712C6B58557732188863594ED8555440740654E
A9C81F645D6384B3EABF0A0535130C1D9A91B923218192D8A337B682B19ECF6F
7FFCA2576CB38365F142AE072119D20E3498C6DAC505ADE6BF1D4E71C9C9C2B8
92B4811173CCBCBB9FAFC8> |-
/W <1C60D8A8C9B08A94C63844F2BBEA4688C519BFDE91307DEC6D3F98473AE6
15F753B6A72AA40574EB09E89AC62240D289B42AA27EA0D59B7361AA14A6FB91
9D66F21E58CE67908014FE18A582D4EF21C8D442967D5E40FC2C232C13335F3D
04309368C979B23F4E85D1CDF9D49DB0207842A979FAF8BB47A498A2D6E183FA
D100611C858EA410ACFB88B346AA33508ADE61067C7586849635693FE4955A4C
099415A8BD6D270EAC370DEEA3E297E3AD768186266F09CF0ACE706749D79B6B
984D42E28558CD5327C2F118F4CC6EDE1AC44C3CD0F2636ECC> |-
/quotedblleft <1C60D8A8C9B08A95A31CD7D9F217DF6120DCABD0E167A257A
C4A4F8797554409B3C7F12D19D6795529DA027999493D1DB6FE70CE90E1B1AB3
9168E50959DDB9CEA27907B9778A061A3E38DC7A161935A06E640D3A2FB72461
CA5FA833CAE9FF7738EF4918FDD11C5F4134DA5DC8C3D2DC5FB1435AF340778A
8D2CFFE9E2B4B5225D982A5D2364C0EB183849250209CA4> |-
/a <1C60D8A8C9B08A95A31CD7D9F217A6CF1F14BABCF0362C345131345FB5E6
DA8E6C8ED7F512902C777433807ACCB42DE67B7FD29E214EA1EBA7E9ADF4C1A8
4DDC078FC876A640056A5E34992C05A79086A380A53F27D21D1A56A831EAA96C
0649349A82A187FD16A4EFDD234560360E79134469D2CBBB4059BF44EA944AD1
E5B91DDBE8D71F66704363DDDCC4ABE6B69A45F10BF90CF154A0C72C48F309DF
5D05AB4AE527BCD1> |-
/b <1C60D8A8C9B08A95C885DB2659C8780FBE7280ECAADE89C0D530F02B8920
47403B9FAAEFBF7040DDFF8642097B2281ED7497FB5E7392979A002879312A5D
CAD251FC55AE94535EADC2DD2FB726B0C2F3F6625386CFD4A18012B25DBA4ACC
A57AF41F358633192EB4791A9803610FDEC2B6D75DEB70996116DE4642496026
25439E533753055D34F138E519561717> |-
/c <1C60D8A8C9B08A95B5589A17E299A85F5665C5E4B2184F65DC2E47214BB0
B655640E4DF66899B3CD7E280321DB74E6A0AC90DAF02086ED7067F1566F2564
73A207B8AE36A9E825836B23190CD3BD52B385D75A7C4B624553406A2D7A571D
A64D4BF6DE8D646FB0997811125257545EC8BE4B24CDFEBB> |-
/d <1C60D8A8C9B08A95C885DB2659C8780FBE7280ECAADE89C0D56C4B4EA822
FE538A01486B96555E66235FBD840DC0DF43983E5127C5D7F139897DAEA59C78
7AB5649761780075F90D6E131A18A4B69128618EC68F851DDA20E1DD43BAF8D3
19F4A481DFAF3242CB6136B6B3644629205B8510D12BDBE94513E10F06046FB2
9F6236D9E17F6BF18556332768EFA12F4908ED9185> |-
/e <1C60D8A8C9B08A95B5589A17E299A85F56650D458389116DCB9863C4EF37
573F0808BAE0849E98429C86423295F495C4F9F75142B66BC3EE558DBEC27F5F
2F749D64DF473B80B5CEBAFF0ACF8EC14534D75AFB2505D42E24B0E4680B7E7C
E8E5E454114C7856C93C0AC14F7D8691C00E3845025BEE44> |-
/f <1C60D8A8C9B08A9568507F33172027C105B5ADB42A2ADDD6877292CB60C9
A21D00E75328C81CFEECC3F2027CCAF706827CC05D6FC224E49E216DC3795E9A
B68EB6903A18E1C16C251EBC00514E15854CADD1F35E71E3E4C4DC100A89E3FD
8591914DD290C990217BCDF88A93C7B56603F1C3BE30062E327C0FAF7E6F4B55
73FBB072AD> |-
/g <1C60D8A8C9B08A95A31CD7D9F217DCBA613E2A13AB3BE987DBE864A65F94
0979A9CA0DE4F427958F72D186CF7E8B5140F34B6484D31EA9F07FDDE599D5BF
659539E8E980B96BD34048C30EF69FCE2EF575C3CAE1F6A5AF691AF71501EF44
B1E38B3525BD4742365E5C3E1ED8C9D67B4D9263AE659FFDEDF430E3A030A143
123BE873807FF39697AB9A8114BF0E999DD65EAC7B00B6359927E4E3D2C9DC9A
2C0DE6296DFAACFE8C44663E94626C56F28B64E439E1FA9FBDA1315406063DCF
2A44AB2214BC866B9B0ECE73F3C2B31F82B2CA5A5704F408AECAA8A39808D74F
9BC6AF8A55820E85945D8C7FDC43752E248691AECCB343AC58AF8C53DBF3A439
132E6577EA6856ED8C5D223F8B12FBF5FE477F> |-
/h <1C60D8A8C9B08A95C885DB2659C87211BC4EC5ACA607AB7CAA4ED8887F7B
44FBD043BA68848E2C916E0D3421A1A3FB42490B273EB69C66B7DCB5EE8CCB39
D1A1C25EABC5AE4AC2E5C9A0AB0FA18CFF00E7E48497A84D20543CB14CE768CB
011654E6BA835CC762D50BDDACD8FE2AD0F238CC6D16099600D48B2FC97CF2FE
F71C0F96A41523BF13E0FA1C874BFC80AA7013BA1F31DE4211F142> |-
/i <1C60D8A8C9B08A9576E61A968506029CDE5FDC9E91593CC5D5199FC72A28
FABD6CC0D5D0D04BDA56BA269FF966D6EC16D7ECF1829B76B1580AB111459633
04ABD33DAF878BC36AAC5FD46795A8D4D5A69947FFE90A1436C98B18FCD89EDC
9C059D4C0C8A6B33> |-
/k <1C60D8A8C9B08A95D5A9FD6D191BBD31361AECDB195F48A33B4E83EABCED
B049FAAB07AA2D69870B38FD78FEA021A33F338435232CB8FC68918CEE229B50
3FFE6E6C16805DC08A3D48FD7E172D39EB38D3B5ADC036EAA4A8E9D700092B60
D7BBABB34FA58A32964C94D7CB4306C28FAB54A52047B24E0076F7C8DE4D6734
B28967D0164DC92AC2A21196284BD858A9C03EF98CD664555ED203A96710DBE6
82DB49A03E18AF6AAB080CCBE2367CD6D2D78EF1B8B89FCA31B299> |-
/l <1C60D8A8C9B08A9576E61A968506029CDE5E0812904B1C0673C7A822193B
416D09DEC1DA45C42AC34B42EEEAC00A2E542CF23099B1536DA97D488C6A8D0B
F81C27D4997194D29D9528> |-
/m <1C60D8A8C9B08A9470D47893C524C45913743DB54751BCFC52BB9A32D88E
3C1E5D83B0E415883B2AD2E7E28F0230EBE2F56D1952643CE6ECF1A1CFACFA7C
7DFB005F7C7F6D0948062FBA81661B0403462BAA61AF1E7491FD41E464C73914
E72E28C90E584AEF439A03BF0C24B5A1E090D01C16D73B984E3E72ED33FC3CC8
E518FB9E02A1394AF1B6A9BB1A7E94995A2063F5640FC0D0501C8478F6F2961C
32245114B482E35A878E17F58A73AD7EE56B9247F35C9C83749C6ADF42FFE629
1C2B60C97769F81EA70CC26030638A680E51F5CC> |-
/n <1C60D8A8C9B08A95C885DB2659C87211BC4EC5ACA6293F3835715B91A05B
429E89D048548812227D6E938618882595AD3BE5151C7285D61D4EDF681EBF2A
D368794C967BC62C56FAA96A1021218B851F56905FAB7017ED3E5D4B62F9934A
51CE83626F4813358569289F1491F6C00718A8F165B09F57C024091A126E9A13
E0E8E891A812B6675460877231A0C4E02FCC4671AE83> |-
/o <1C60D8A8C9B08A95A31CD7D9F217A6F18926FF3B04016008717510E7C084
6797161FF05720FDF79EF9704AE9DEDBA3B564A4978EFC289A93106A3A9F8B79
AD83136E7C511DBF2936F408BE7BF91543A29C736D6E841C95ECB56676548794
7995D5A1BB7AC40AD159E88316445A3A56E494EDCD14B9233174B4CE973228> |-
/p <1C60D8A8C9B08A95C885DB2659C8023C740907958C05A0FE3D32C1AED0D2
47E58170FD881E0CA8F92963D7C94888F83ED856EFAA8E383C2FDB73DDACEE45
6DB48179CAB6F9FCADBA485FF1D0E4DF5B1D9C0480EF8A1215A4C40EDD156ED4
0B701CFAB9641D87E5A180CEFDAE7C6B52C45BD60D6DA46A38CE4C95428B423E
1B15E6731D336D501BFB5DAE73DC87A6430468937ECC1FA7F492DE599CF93C> |-
/r <1C60D8A8C9B08A9588E3899D564A16E63D73C403947F3015AF70469DCC6F
78EDE77512BB23D12082C2DBA0B7899819DE8B3D7EEA4A8EF10E272BCD74A017
D6F97D05E2F80199A8991073DD91993927CF34A1339030E445CE45393513A00E
2425641EEACB8A82577FFD2C5C182D8AD249329F8DB255162C47D8ACEFA8C8> |-
/s <1C60D8A8C9B08A958A24782D71375EF21950AD5C90D95DC09ABA456BD225
3D84934E93B7D2A3EEA20E2916EF9ECA28811CC3A96617CFFDCE19884615DA7E
77E08860F4209F188989C998A403093229579502F2DE1A147DD2E330DC25A118
09633D420CD1D2013A2228F76EDF2BF783C8E037EE747188EC05433B30FB5ACA
31766E52558A400E9F1E89405EB57164BB89DEA33EFAA9650D2DDCABFE83321F
5AD1B01353F7B522A521F05B9FFFA9611A2A59C61D7ECBEEF01372C957A9571D
B391089CCB5C422936> |-
/t <1C60D8A8C9B08A9588E3899D564A1C85A21E7ECD682F7264F9E8902395FC
9DF7A2A8EBC627E2390688A9814E53FC9B80A20E542DE0DAE6D73FC462759AC1
8091F65700C92B40F98122346126900707E4394E094C95A10DFEA301107CB4> |-
/u <1C60D8A8C9B08A95C885DB2659C8780FBE729CB466F9C7B656C704699623
BAE0179B047981063F53F67BD775AA7ED94080D8BAA0913E9F3A38187C2875A7
DAE7767F1C28B68EC01506DD151B80F1E3B90BF1D9715B3B910A181D76A6B47D
DECB7D8531FD2EFDFDDD9900FC03094BE3EA7936B460> |-
/v <1C60D8A8C9B08A95D5A9FD6D191BB7621A8865438CCCCBCB90C34B8F520F
0DD625B02B0015EB35A34947F592B0EBD6B852D9994A1B59941545B7832E6ADD
A90063FADECE991D5D12DBFED9040BABBCE24E757FB4F72086D2A8D9771EBAA1
99DAA5409AC3E062B606D07DF0C37E9DD3D9C5D8D1C13519B1B129D30ACBB7D6
E06BF0328019C577BFA2> |-
/w <1C60D8A8C9B08A945A96BCDB30983EA21157BCB9A20628BA39D0C0783FA4
9C5EE80C99C48EF9BD437E345097B8AA06CBC1536199E4F5C43600F8B5259B93
9ADD4C67E0A91776054CD96143A6504BA5286E2D84D396299F3527A9950E2839
06D911D4E9E9A2390B160676844A2C47262FA8A94BEFED02C791F5A563E8C901
96DFBBFF8E9A0DFB918E49E347659830E453B0E80F6F4994AB39B0B9DDBEA1FE
A87AB0B3B45C2149FD5F1BF73917221CDBC3757DEF3BB2D0CD8844941B17FFED
0294799F76067AF0BD6A3D63CAB07C4433BE01> |-
/x <1C60D8A8C9B08A95D5A9FD6D191BBD31361AE9AD30362D524C90D8E6BA15
0860090FA3519ABA3686467358E61B02F6424BFF9CBE6BA21230C7F0C12167B1
70E26D8D769481B19028B303B2BFA84C3A56246D98D2D6239079BDC8B841DE36
8A3C365AB7B6257EBAD0BBE04A65E686735DF3D9D19DE3F3EAFC64C19EC844BA
61BD13B9DA29C64E9A3B63B46713D0924C3A4115BC33AD5FAAF887799C640D63
1200D905F41E05B9B966500251402C3219ABEDE8D8BA00BFA50DF90EB8ACF179
85483C9E7119EA2A73E4686A765E83FFABCC5527E36765FBEB7221BF455D1659
D38E3CE8DDCD2651DC6B769A> |-
/y <1C60D8A8C9B08A95D5A9FD6D191BCDE065208B67F95EE345C19D1DE7D2D1
55F2BE2C5BE55C510CBE4CFA6D4E31DEA62B0DE41189FAD7B2F565290AF0237A
4EBEB7D69EFF86119AAC48131CACEB70CB502DC54BD7BE481D30D892B04C482E
DB77721A25DEA71A2FB19DC6BF0B80B76328D544982AF54A91B3E713E216B53D
D1720289E971FE75FFD1E4A8CCC17BEB51D1A5236681AA4F4E4EE6084955CC7C
2FDDCDA3A9F5DB9302229BA895D0> |-
/.notdef <1C60D8A8C9B08A9563F93DCB7939BC> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZWJIEH+CMR12~15 /GFNBAA+CMR12~15 findfont ct_VMDictPut
/ZWJIEH+CMR12~15*1 
[12{/.notdef}rp /fi 21{/.notdef}rp /quotedblright 4{/.notdef}rp /quoteright /parenleft /parenright 
2{/.notdef}rp /comma /hyphen /period 2{/.notdef}rp /one 7{/.notdef}rp /nine 
7{/.notdef}rp /A 4{/.notdef}rp /F 6{/.notdef}rp /M 5{/.notdef}rp /S 
/T /.notdef /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /.notdef 
/r /s /t /u /v /w /x /y 
134{/.notdef}rp]
ZWJIEH+CMR12~15 nf
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
360.133 -236.433 mo
(19)
[5.84601 0 ]xsh
-16.7061 -199.569 mo
(algorithms)
[5.84602 3.23978 5.84603 5.84602 4.543 3.23978 4.543 6.50365 9.75529 0 ]xsh
42.8154 -199.569 mo
(that)
[4.543 6.50365 5.84602 0 ]xsh
69.795 -199.569 mo
(w)sh
77.9114 -199.569 mo
(e'll)
[5.20044 3.23979 3.23978 0 ]xsh
98.3754 -199.569 mo
(see)
[4.61469 5.20044 0 ]xsh
118.935 -199.569 mo
(later)
[3.23979 5.84602 4.54298 5.20044 0 ]xsh
147.851 -199.569 mo
(in)
[3.23978 0 ]xsh
163.139 -199.569 mo
(this)
[4.543 6.50366 3.23978 0 ]xsh
187.575 -199.569 mo
(class)
[5.20044 3.23978 5.84604 4.61469 0 ]xsh
216.635 -199.569 mo
(will)
[8.44022 3.23981 3.23978 0 ]xsh
240.347 -199.569 mo
(also)
[5.84604 3.23978 4.61469 0 ]xsh
265.447 -199.569 mo
(b)sh
272.275 -199.569 mo
(e)sh
283.01 -199.569 mo
(amenable)
[5.84607 9.75525 5.20044 6.50366 5.84601 6.50366 3.23981 0 ]xsh
336.65 -199.569 mo
(to)
[4.54303 0 ]xsh
352.583 -199.569 mo
(this)
[4.54297 6.50366 3.23981 0 ]xsh
-16.7063 -185.124 mo
(metho)
[9.75529 5.20044 4.543 6.50365 0 ]xsh
15.4662 -185.124 mo
(d,)
[6.50365 0 ]xsh
29.1066 -185.124 mo
(whic)
[8.44023 6.50365 3.23978 0 ]xsh
52.1669 -185.124 mo
(h)sh
62.5765 -185.124 mo
(has)
[6.50365 5.84602 0 ]xsh
83.4379 -185.124 mo
(come)
[5.20044 5.84602 9.75529 0 ]xsh
113.346 -185.124 mo
(to)
[4.543 0 ]xsh
127.641 -185.124 mo
(b)sh
134.469 -185.124 mo
(e)sh
143.566 -185.124 mo
(kno)
[6.16891 6.50363 0 ]xsh
161.761 -185.124 mo
(wn)
[8.44022 0 ]xsh
180.611 -185.124 mo
(as)
[5.84604 0 ]xsh
194.977 -185.124 mo
(the)
[4.543 6.50366 0 ]xsh
215.122 -185.124 mo
(\\k)
[5.84604 0 ]xsh
226.812 -185.124 mo
(ernel)
[5.20044 4.543 6.50363 5.20044 0 ]xsh
255.406 -185.124 mo
(tric)
[4.54301 4.54297 3.23981 0 ]xsh
272.608 -185.124 mo
(k.")
[6.16895 3.23975 0 ]xsh
%ADOBeginSubsetFont: HJCBAA+CMBX12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HJCBAA+CMBX12 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 56 /eight put
dup 82 /R put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 122 /z put
def
/FontBBox {12 -251 1025 750} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 0 686 698 444 453 656 676] def
/OtherBlues [-201 -194] def
/BlueScale 0.04379 def
/StdHW [43] def
/StdVW [109] def
/StemSnapH [34 43] def
/StemSnapV [109 132] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
21 dict dup begin
/hyphen <1C60D8A8C9B724821A39B73B8EB9D0C98DEE451C448038881E45C51
37103> |-
/eight <1C60D8A8C9B08A95090CFBBDE915983231918B16F8979359B3DD8364
A1C980145D995A2F2DED3419EA250A0EE6AC539CFACD9EED5DB3E71E6CF04A77
365AB2D4AACE703CB5DB5C685035314725A23130A5446218EC74EB1D941FBF1E
74117770F3B026823AA53974A02F108AA69271E97DDA7110C8FEBA12E7B9E6B0
51CA4925755ECE29FBB51F40C518B8E631FFB2975360F2353DFF7FB66D9301FA> |-
/R <1C60D8A8C9B08A940992D12BD885F06E08A3B5CE5B160A3343CBBEA8E1E5
EB94B230222BF57716345A975D90FBA3576A76DF711B9A3CA37A64467667F5AF
70220AE80801543350D84919AB3886FBDC7181F517D3543FB5F057AC6BFD28AA
C100EB2C7F2261069012E040B915BA128FC9E8638CA4B57409D0D5547BC45AEE
148760551F2CA784DDDB9A072CF68AAB09B42B1602F0F61A69DFCB6745023B95
9FBF60B50564478B616430B2806E9C7BE5412068101D264775C269F29A277A2D
0E7BCC8BD4CC9D19F2F25FE68E> |-
/a <1C60D8A8C9B08A95C96620E75CABF74F978CA2083A0E64E7B623771A69DF
79A1496F53320155EF6230CD76629B835BA61D1C7BFCD72D659594C6AFFB6C7E
802398A50994BCE7C5C23BAD243919C88907ECAC871D06C6ED4716017399C9EC
CF9F0CBBC933CEBADE976E377B66E4C69C303DE103F96D7C380F870339E353E7
7FC482A6D935576C31AAF7658321BC33D26C3416CD755FAD92DB> |-
/b <1C60D8A8C9B66482CEFC1B8CCAA8ECB70A481DE82F502AF745D456651693
31089799DA8074DAD49E6DB81AAF20BBE20D8202ACCE670B0D006386E4FC03DA
9727066AA6FBDD717BDA6FF6B463938D0FB31747F0DEA44084C933300C67D959
51CF87644E2C594CD6E4F67BD5B3B1C372C112AA98AE8FDD397355A99B1B> |-
/c <1C60D8A8C9B7A73DCB069ABECD090F3292F5E8760A9C7F9B28F11EE89290
CF911A92C02CAFF103813C75E789DA78F7B162B0378ED6294F706B3F21F2E4E8
2FB4BDA2F798324C3274A46C0AEDE4903EA87C3F95205E067ACCE7D6D98F016B
38F1A0EC007FD5AB7CDC846311469DD6EE408A2F815BAEC263BD79> |-
/d <1C60D8A8C9B66482CEFC1B8CCAA8ECB70A481DB3E884C694A3CEB4144D9E
D280B5827C0A1D778D29D47AFF3793E47CCDFA4018F82E99F35259DF5041C820
B7B4654A1E3DFDBDCDC0262F8FCC1113D069490F97738675EA3EE1140E903713
CF16B420B6B485C456B7B1A633A0EF33BDE185310B569F162178B3FE92A84F3E
1600564D> |-
/e <1C60D8A8C9B08A95D42639199D9EF7781EC08E4E816F8C01343D37A2B105
E8AB8AB1FDB0848649E86059672D957228B313AF0FFB4A960C20DE2B4265D70D
66B815EB8FC372D276F1A9CE1A93C25C791CD56D083C270295D962C8810A8BD7
F499D3451B2F8F01171F6D284CAC7B6BC2814387EA62B9A817646426C183F0FC
4C995381> |-
/g <1C60D8A8C9B08A95090CFBBDE9151CD9A545C89D314E9D050C555FD62D76
9B2D2184D76B72767ADC7088034EE87417AC436D4376EDC3823E6912BB8DD976
F98FB6E796730264EEF293473C5B7C47AB429FDA19BCD67D64D3235AA06478E1
7CF4A4D7E12C404944B53A685EDDEC83872606C4530A355BFB62F3B8115B744B
C76F1462D082A3E9C7F630F2AA7A638C4145A1DFCEAA23F1451490F348BBB076
CA017A510FE32CFF5BCFDD06235E6B66BDF1B9E277D6ED5B6BAD24BE6ECE520A
5ACA4683C9DBB80D2B6F5E7EE0AA4F472874B443D52E23A29F49BD46493F8DD1
456D03C3F38A192AE5CBA2BE6C2507C34B0EAA2771> |-
/h <1C60D8A8C9B66482C0B06145CAB2A5091088800E4EE6F6A4F7CFA42A380C
202EFC4629F621CBA3BD01BD90C2400E30B3D5AAFD0F96AB82E83FADD946AF79
8BF5C0FC7F82103634043AB38768B6F08AEBDB631399DF4921453CEEC72C1297
F7F8B3D7248698822D40D80C7D40731466DDA0F9E70BEC1C5D734767F50EBF3C
5412> |-
/i <1C60D8A8C9B08A9510AF83E41B62DF17FA6FFE42F43376AE7BE112262DFB
81CF6A7782777BCDF754B6FFCE8A9120C0B23C1D4FAF93ECD8BF7E9BD82B6C4C
6069D0A0051D66536257C9D076E038A24B6A9614C7660C9B1DF04367740F915F
7836D1> |-
/l <1C60D8A8C9B08A9510AF83E41B62DF17FA6E185551178BEEEEB016EDC0AF
4A1E00C264F4E1282BA3DF5A515FAD7EF638817EAC00A088FF13BF1B4A9C8501
269A94E94B> |-
/n <1C60D8A8C9B66482C0B06145CAB2A52064D0AD13B76D62A68E1CA85E83A9
47C22FBA1D333B3A91CB07B97058C1EF7B16D7A29F4CB41AAF1054B7F9FF73A4
8366745DAD5772EA1083F2CD2134C17AA9253B4CE26CF4115B4E8E2826BE89C5
4CAB6AF786691F9984077D22ACBC935D59D9FF0E5291F2B85B9B8DEC535E> |-
/o <1C60D8A8C9B08A95090CFBBDE9156259107B60BFA8F4BE78F35EE5F5532B
20F872A831BD64277FFE251C33744D46B86CAED0C86D4A85BB61FD8C039175A1
5A18F6F3B55384A4B8C68BFE41879F59BF31FADBC3B0C1CC9252A6A4F0C4E11B
CD56383A373EAC364FCEC6C8B9F0D522EC243A> |-
/p <1C60D8A8C9B66482B07643C41869C63A3CA7FC3DC2F0CE4B471B20FCCCD9
48FEEB3384D76DFFE8C739E8102DA53F65BEF512C329C6DC5022E71351D09073
C6DE4E454E327F07DC09BF42D162CC303F6A7D4AAA93C290A7169B2C0E0F7932
CB7D6D19364AA8C87734A8673907399D6D98E7730129FF39F57009345CAEDDDC
E16AC7458D1549> |-
/r <1C60D8A8C9B08A95AFB286DB4B4ACF2D4077830A706B90C389169C2A4881
7D65C3E75289597BC4105D7C75DB52C1CE0B8FFDBE4F7EBD7A6600F4AC6B4128
1ED22DDF987378B21991DD05C05E013BBE0C5447535502C477B093C474BBAF68
FE5F897D1A3C8CA07B2FF3C72D859FABD3F0A0> |-
/s <1C60D8A8C9B08A95B13B46E21B13FDFC2F2A3A5AB372AFFB322C87DA52B8
E47D271AA815DB2D4DC04C160A1C8C59B8358656F76FF4F6FC656BE874AFB6C7
1A76DEB425FE4F792753B88739BD909ADCABA4643E3524438E6832DE74A3ABED
BCB96FFF7A5BCD41908E196D5B668AB8687060727C3A16D526493ED3BF944F7B
45221B01A251A918282209CF4690ABBA485E7F3568009CF218B74E8022FB8C61
2301E436A8FBE863D2E285FF384876DB0EEF303F228BC5EC94156A690048BCE8
645D> |-
/t <1C60D8A8C9B08A950D39B484C8B6266357FB741549CEA596AB57C14CF303
B67CE71D4CD630CA27C189CF57DAC62FC17FB535F136E1998F8F661347D6BA89
649FA6B233D745EED36E1882B9AACF4ADDA047134106AA71EA23E81C61C5A6> |-
/u <1C60D8A8C9B66482CEFC1B8CDC3949FF8FF7FA8B3D746DCFA850E7C90E66
51F149761B0B7FC876B87357E80C6EB689A294BAF1011E6B9B0AA8FF0696D242
D20786BCB0155C86B1F327CB83E7D276B9E5F44F9930F1AC79F1D53EBA592188
F3588C7F> |-
/z <1C60D8A8C9B7A73DC57C22BB023E4E10C5A31D553E4A5F270071B39C59BF
1DDE5565D6ADFDB63DC276BF28ADE63EF945189B465DA45AA637771D7EC370E5
2F6C284898533363D93C906BE96C51E6E8CDD12290D9468C254EEA8D354CE0> |-
/.notdef <1C60D8A8C9B72482E3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZWJIEI+CMBX12 /HJCBAA+CMBX12 findfont ct_VMDictPut
/ZWJIEI+CMBX12*1 
[45{/.notdef}rp /hyphen 10{/.notdef}rp /eight 25{/.notdef}rp /R 14{/.notdef}rp /a 
/b /c /d /e /.notdef /g /h /i 
2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r 
/s /t /u 4{/.notdef}rp /z 133{/.notdef}rp]
ZWJIEI+CMBX12 nf
ZWJIEI+CMBX12*1 [17.2155 0 0 -17.2155 0 0 ]msf
-16.706 -145.452 mo
(8)sh
12.3371 -145.452 mo
(Regularization)
[14.4439 8.83156 9.67505 10.7597 5.37119 9.39975 7.9019 5.37119 8.59041 9.39975 7.52312 5.37117 
9.67506 0 ]xsh
141.854 -145.452 mo
(and)
[9.39975 10.7597 0 ]xsh
179.217 -145.452 mo
(the)
[7.5231 10.7597 0 ]xsh
212.784 -145.452 mo
(non-separable)
[10.7597 9.67508 10.7597 6.43848 7.62636 8.83154 10.7597 9.39972 7.90192 9.39978 10.7596 5.37122 
0 ]xsh
335.733 -145.452 mo
(case)
[8.59039 9.39978 7.62634 0 ]xsh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
-16.7066 -119.172 mo
(The)
[8.44022 6.50365 0 ]xsh
8.88278 -119.172 mo
(deriv)
[6.50365 5.20044 4.543 3.23979 0 ]xsh
33.8905 -119.172 mo
(ation)
[5.84602 4.543 3.23979 5.84602 0 ]xsh
65.323 -119.172 mo
(of)
[5.84602 0 ]xsh
80.1857 -119.172 mo
(the)
[4.543 6.50365 0 ]xsh
101.869 -119.172 mo
(SVM)
[6.50365 8.76311 0 ]xsh
133.304 -119.172 mo
(as)
[5.84604 0 ]xsh
149.21 -119.172 mo
(presen)
[6.50366 4.543 5.20044 4.61469 5.20044 0 ]xsh
181.452 -119.172 mo
(ted)
[4.543 5.20044 0 ]xsh
203.135 -119.172 mo
(so)
[4.61469 0 ]xsh
219.04 -119.172 mo
(far)
[3.56268 5.84601 0 ]xsh
238.446 -119.172 mo
(assumed)
[5.84604 4.61469 4.61469 6.50362 9.75531 5.20044 0 ]xsh
286.93 -119.172 mo
(that)
[4.54297 6.50366 5.84601 0 ]xsh
313.801 -119.172 mo
(the)
[4.54303 6.50366 0 ]xsh
335.493 -119.172 mo
(data)
[6.50366 5.84601 4.54297 0 ]xsh
363.677 -119.172 mo
(is)
[3.23981 0 ]xsh
-16.7072 -104.718 mo
(linearly)
[3.23978 3.23978 6.50365 5.20043 5.84604 4.54298 3.23979 0 ]xsh
25.2253 -104.718 mo
(separable.)
[4.61469 5.20044 6.50365 5.84602 4.543 5.84604 6.50363 3.23979 5.20044 0 ]xsh
81.2729 -104.718 mo
(While)
[12.0149 6.50365 3.23978 3.23979 0 ]xsh
115.414 -104.718 mo
(mapping)
[9.75529 5.84604 6.50363 6.50366 3.23978 6.50366 0 ]xsh
163.554 -104.718 mo
(data)
[6.50366 5.84601 4.543 0 ]xsh
190.225 -104.718 mo
(to)
[4.543 0 ]xsh
204.556 -104.718 mo
(a)sh
214.344 -104.718 mo
(high)
[6.50366 3.23978 5.84601 0 ]xsh
240.371 -104.718 mo
(dimensional)
[6.50366 3.23978 9.75529 5.20044 6.50366 4.61469 3.23975 5.84607 6.5036 5.84607 0 ]xsh
304.806 -104.718 mo
(feature)
[3.56268 5.20044 5.84601 4.54297 6.50366 4.54297 0 ]xsh
344.138 -104.718 mo
(space)
[4.61469 6.50366 5.84601 5.20044 0 ]xsh
-16.7072 -90.2728 mo
(via)
[6.16891 3.23978 0 ]xsh
%ADOBeginSubsetFont: BMGBAA+CMMI12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /BMGBAA+CMMI12 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 30 /phi put
def
/FontBBox {-31 -250 1026 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 683 704 431 441 452 463] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [22] def
/StdVW [65] def
/StemSnapH [22 29] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/phi <1C60D8A8C9B08A950A605188063283C5DFAB851525196171E2B148B6F0
E40A958F2D89B5D6D8867A248AF0D957CF28A174CC911748F6A0F28FE07E209C
E61A122ACAEA4FF916B945581C2043466AB09B52365E845B9CA5DD7A6E248110
D9AFFCE10CD471A30FF253AAF8F0F688074A62C4B90C35FEDEA4310EFD89E885
BF760E46CFE54061EECEA7E7687441F0B7D7B8C787FC911C19B57A935186B658
C71B3EBCE096B8564A8BFB4382C1E3DD894C03DAC0F864ABCC2050C0C6BBEDD1
B380EC034A> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZWJIEJ+CMMI12 /BMGBAA+CMMI12 findfont ct_VMDictPut
/ZWJIEJ+CMMI12*1 
[30{/.notdef}rp /phi 225{/.notdef}rp]
ZWJIEJ+CMMI12 nf
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
3.48857 -90.2728 mo
(\036)sh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
15.3426 -90.2728 mo
(do)
[6.50365 0 ]xsh
28.0163 -90.2728 mo
(es)
[5.20044 0 ]xsh
42.7634 -90.2728 mo
(generally)
[5.84602 5.20044 6.50365 5.20044 4.543 5.84602 3.23979 3.23978 0 ]xsh
93.4926 -90.2728 mo
(increase)
[3.23979 6.50365 5.20044 4.543 5.20044 5.84602 4.61469 0 ]xsh
138.782 -90.2728 mo
(the)
[4.543 6.50366 0 ]xsh
159.952 -90.2728 mo
(lik)
[3.23978 3.23981 0 ]xsh
172.277 -90.2728 mo
(eliho)
[5.20044 3.23978 3.23981 6.50363 0 ]xsh
196.63 -90.2728 mo
(o)sh
202.801 -90.2728 mo
(d)sh
214.254 -90.2728 mo
(that)
[4.543 6.50366 5.84601 0 ]xsh
240.613 -90.2728 mo
(the)
[4.543 6.50366 0 ]xsh
261.792 -90.2728 mo
(data)
[6.50366 5.84601 4.54303 0 ]xsh
289.462 -90.2728 mo
(is)
[3.23981 0 ]xsh
302.249 -90.2728 mo
(separable,)
[4.61469 5.20044 6.50366 5.84601 4.54303 5.84601 6.50366 3.23981 5.20044 0 ]xsh
358.18 -90.2728 mo
(w)sh
366.296 -90.2728 mo
(e)sh
-16.707 -75.8278 mo
(can't)
[5.20044 5.84602 6.50365 3.23979 0 ]xsh
12.748 -75.8278 mo
(guaran)
[5.84602 6.50365 5.84602 4.543 5.84602 0 ]xsh
47.5124 -75.8278 mo
(tee)
[4.543 5.20044 0 ]xsh
66.5693 -75.8278 mo
(that)
[4.543 6.50365 5.84602 0 ]xsh
92.1269 -75.8278 mo
(it)
[3.23979 0 ]xsh
104.023 -75.8278 mo
(alw)
[5.84602 3.23979 0 ]xsh
121.225 -75.8278 mo
(a)sh
126.747 -75.8278 mo
(ys)
[6.16891 0 ]xsh
141.67 -75.8278 mo
(will)
[8.44022 3.23981 3.23978 0 ]xsh
163.961 -75.8278 mo
(b)sh
170.789 -75.8278 mo
(e)sh
180.102 -75.8278 mo
(so.)
[4.61469 5.84604 0 ]xsh
199.662 -75.8278 mo
(Also,)
[8.76312 3.23978 4.61469 5.84601 0 ]xsh
229.55 -75.8278 mo
(in)
[3.23978 0 ]xsh
243.416 -75.8278 mo
(some)
[4.61469 5.84604 9.75529 0 ]xsh
272.954 -75.8278 mo
(cases)
[5.20044 5.84607 4.61469 5.20044 0 ]xsh
302.553 -75.8278 mo
(it)
[3.23981 0 ]xsh
314.458 -75.8278 mo
(is)
[3.23981 0 ]xsh
326.434 -75.8278 mo
(not)
[6.50366 5.84601 0 ]xsh
347.44 -75.8278 mo
(clear)
[5.20044 3.23981 5.20044 5.84601 0 ]xsh
-16.7074 -61.3828 mo
(that)
[4.543 6.50365 5.84602 0 ]xsh
8.79625 -61.3828 mo
(\014nding)
[6.50365 6.50365 6.50366 3.23978 6.50366 0 ]xsh
47.9556 -61.3828 mo
(a)sh
57.8696 -61.3828 mo
(separating)
[4.61469 5.20044 6.50365 5.84602 4.543 5.84604 4.54298 3.23979 6.50365 0 ]xsh
114.633 -61.3828 mo
(h)sh
120.812 -61.3828 mo
(yp)
[6.16891 0 ]xsh
133.809 -61.3828 mo
(erplane)
[5.20044 4.543 6.50366 3.23978 5.84601 6.50366 0 ]xsh
174.905 -61.3828 mo
(is)
[3.23978 0 ]xsh
186.836 -61.3828 mo
(exactly)
[5.20044 6.16891 5.84601 5.20044 4.543 3.23981 0 ]xsh
227.29 -61.3828 mo
(what)
[8.44022 6.50366 5.84601 0 ]xsh
256.691 -61.3828 mo
(w)sh
264.807 -61.3828 mo
(e'd)
[5.20044 3.23981 0 ]xsh
283.819 -61.3828 mo
(w)sh
291.935 -61.3828 mo
(an)
[5.84601 0 ]xsh
303.961 -61.3828 mo
(t)sh
312.572 -61.3828 mo
(to)
[4.54303 0 ]xsh
327.029 -61.3828 mo
(do,)
[6.50366 5.84601 0 ]xsh
346.741 -61.3828 mo
(since)
[4.61469 3.23975 6.50366 5.20044 0 ]xsh
-16.7075 -46.9377 mo
(that)
[4.543 6.50365 5.84602 0 ]xsh
10.2631 -46.9377 mo
(migh)
[9.75529 3.23978 5.84604 0 ]xsh
35.284 -46.9377 mo
(t)sh
45.3619 -46.9377 mo
(b)sh
52.1895 -46.9377 mo
(e)sh
62.925 -46.9377 mo
(susceptible)
[4.61469 6.50365 4.6147 5.20042 5.20044 6.50366 4.543 3.23978 6.50366 3.23978 0 ]xsh
123.824 -46.9377 mo
(to)
[4.543 0 ]xsh
139.748 -46.9377 mo
(outliers.)
[5.84604 6.50363 4.543 3.23978 3.23981 5.20044 4.543 4.61469 0 ]xsh
190.826 -46.9377 mo
(F)sh
197.493 -46.9377 mo
(or)
[5.84604 0 ]xsh
213.417 -46.9377 mo
(instance,)
[3.23978 6.50366 4.61469 4.543 5.84601 6.50366 5.20044 5.20044 0 ]xsh
264.258 -46.9377 mo
(the)
[4.54303 6.50366 0 ]xsh
286.04 -46.9377 mo
(left)
[3.23975 5.20044 3.56268 0 ]xsh
308.12 -46.9377 mo
(\014gure)
[6.50366 5.84601 6.50366 4.54303 0 ]xsh
342.252 -46.9377 mo
(b)sh
349.08 -46.9377 mo
(elo)
[5.20044 3.23981 0 ]xsh
363.042 -46.9377 mo
(w)sh
-16.7078 -32.4927 mo
(sho)
[4.61469 6.50365 0 ]xsh
-.0674133 -32.4927 mo
(ws)
[8.44023 0 ]xsh
16.6596 -32.4927 mo
(an)
[5.84602 0 ]xsh
32.6722 -32.4927 mo
(optimal)
[5.84602 6.50365 4.543 3.23979 9.75529 5.84602 0 ]xsh
75.318 -32.4927 mo
(margin)
[9.75529 5.84602 4.543 5.84602 3.23978 0 ]xsh
114.715 -32.4927 mo
(classi\014er,)
[5.20044 3.23979 5.84602 4.61469 4.61469 3.23978 6.50366 5.20044 4.543 0 ]xsh
164.683 -32.4927 mo
(and)
[5.84604 6.50363 0 ]xsh
187.2 -32.4927 mo
(when)
[8.44022 6.50366 5.20044 0 ]xsh
217.511 -32.4927 mo
(a)sh
227.02 -32.4927 mo
(single)
[4.61469 3.23978 6.50366 5.84601 3.23981 0 ]xsh
259.336 -32.4927 mo
(outlier)
[5.84607 6.5036 4.54303 3.23975 3.23981 5.20044 0 ]xsh
296.124 -32.4927 mo
(is)
[3.23975 0 ]xsh
307.641 -32.4927 mo
(added)
[5.84607 6.5036 6.50366 5.20044 0 ]xsh
341.862 -32.4927 mo
(in)
[3.23975 0 ]xsh
355.268 -32.4927 mo
(the)
[4.54303 6.50366 0 ]xsh
-16.708 -18.0477 mo
(upp)
[6.50365 6.50365 0 ]xsh
3.12682 -18.0477 mo
(er-left)
[5.20044 4.543 3.8974 3.23979 5.20044 3.56267 0 ]xsh
38.1735 -18.0477 mo
(region)
[4.543 5.20044 5.84602 3.23979 5.84602 0 ]xsh
74.2215 -18.0477 mo
(\(righ)
[4.543 4.543 3.23978 5.84602 0 ]xsh
98.5729 -18.0477 mo
(t)sh
107.976 -18.0477 mo
(\014gure\),)
[6.50365 5.84602 6.50365 4.543 5.20044 4.543 0 ]xsh
149.449 -18.0477 mo
(it)
[3.23978 0 ]xsh
162.101 -18.0477 mo
(causes)
[5.20044 5.84604 6.50363 4.61469 5.20044 0 ]xsh
198.95 -18.0477 mo
(the)
[4.543 6.50366 0 ]xsh
220.057 -18.0477 mo
(decision)
[6.50366 5.20044 5.20044 3.23978 4.61469 3.23978 5.84604 0 ]xsh
265.266 -18.0477 mo
(b)sh
272.093 -18.0477 mo
(oundary)
[5.84607 6.5036 6.50366 6.50366 5.84601 4.54303 0 ]xsh
318.868 -18.0477 mo
(to)
[4.54297 0 ]xsh
334.126 -18.0477 mo
(mak)
[9.75525 5.84607 0 ]xsh
355.572 -18.0477 mo
(e)sh
365.642 -18.0477 mo
(a)sh
-16.7083 -3.60272 mo
(dramatic)
[6.50365 4.543 5.84602 9.75529 5.84602 4.543 3.23978 0 ]xsh
32.675 -3.60272 mo
(swing,)
[4.61469 8.44023 3.23978 6.50365 5.84604 0 ]xsh
68.4654 -3.60272 mo
(and)
[5.84602 6.50365 0 ]xsh
91.2156 -3.60272 mo
(the)
[4.543 6.50365 0 ]xsh
111.36 -3.60272 mo
(resulting)
[4.543 5.20044 4.61469 6.50366 3.23978 4.543 3.23978 6.50366 0 ]xsh
159.5 -3.60272 mo
(classi\014er)
[5.20044 3.23978 5.84604 4.61469 4.61469 3.23978 6.50366 5.20044 0 ]xsh
206.408 -3.60272 mo
(has)
[6.50366 5.84601 0 ]xsh
227.27 -3.60272 mo
(a)sh
237.022 -3.60272 mo
(m)sh
246.453 -3.60272 mo
(uc)
[6.50366 0 ]xsh
257.833 -3.60272 mo
(h)sh
268.234 -3.60272 mo
(smaller)
[4.61469 9.75531 5.84601 3.23981 3.23981 5.20044 0 ]xsh
308.579 -3.60272 mo
(margin.)
[9.75525 5.84607 4.54297 5.84601 3.23981 6.50366 0 ]xsh
.175229 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
88.8569 37.9872 mo
92.3619 41.4912 li
@
88.8569 41.4912 mo
92.3619 37.9872 li
@
102.875 50.2532 mo
106.38 53.7572 li
@
102.875 53.7572 mo
106.38 50.2532 li
@
85.3519 52.0052 mo
88.8569 55.5102 li
@
85.3519 55.5102 mo
88.8569 52.0052 li
@
102.875 60.7672 mo
106.38 64.2712 li
@
102.875 64.2712 mo
106.38 60.7672 li
@
73.0859 46.7482 mo
76.5909 50.2532 li
@
73.0859 50.2532 mo
76.5909 46.7482 li
@
52.5959 45.5102 mo
56.1009 49.0142 li
@
52.5959 49.0142 mo
56.1009 45.5102 li
@
90.1889 68.8272 mo
93.6929 72.3322 li
@
90.1889 72.3322 mo
93.6929 68.8272 li
@
70.0259 30.8372 mo
73.5299 34.3422 li
@
70.0259 34.3422 mo
73.5299 30.8372 li
@
86.6609 27.1222 mo
90.1649 30.6272 li
@
86.6609 30.6272 mo
90.1649 27.1222 li
@
58.4839 30.4402 mo
61.9889 33.9452 li
@
58.4839 33.9452 mo
61.9889 30.4402 li
@
55.5629 104.574 mo
55.5629 105.542 54.7789 106.326 53.8109 106.326 cv
52.8429 106.326 52.0589 105.542 52.0589 104.574 cv
52.0589 103.606 52.8429 102.822 53.8109 102.822 cv
54.7789 102.822 55.5629 103.606 55.5629 104.574 cv
cp
@
31.0309 92.3082 mo
31.0309 93.2762 30.2469 94.0602 29.2789 94.0602 cv
28.3109 94.0602 27.5269 93.2762 27.5269 92.3082 cv
27.5269 91.3402 28.3109 90.5552 29.2789 90.5552 cv
30.2469 90.5552 31.0309 91.3402 31.0309 92.3082 cv
cp
@
60.8199 94.0602 mo
60.8199 95.0282 60.0359 95.8122 59.0679 95.8122 cv
58.0999 95.8122 57.3159 95.0282 57.3159 94.0602 cv
57.3159 93.0922 58.0999 92.3082 59.0679 92.3082 cv
60.0359 92.3082 60.8199 93.0922 60.8199 94.0602 cv
cp
@
76.5909 95.8122 mo
76.5909 96.7802 75.8059 97.5652 74.8389 97.5652 cv
73.8709 97.5652 73.0859 96.7802 73.0859 95.8122 cv
73.0859 94.8452 73.8709 94.0602 74.8389 94.0602 cv
75.8059 94.0602 76.5909 94.8452 76.5909 95.8122 cv
cp
@
38.0399 104.574 mo
38.0399 105.542 37.2559 106.326 36.2879 106.326 cv
35.3199 106.326 34.5359 105.542 34.5359 104.574 cv
34.5359 103.606 35.3199 102.822 36.2879 102.822 cv
37.2559 102.822 38.0399 103.606 38.0399 104.574 cv
cp
@
45.0499 87.0512 mo
45.0499 88.0192 44.2649 88.8032 43.2969 88.8032 cv
42.3299 88.8032 41.5449 88.0192 41.5449 87.0512 cv
41.5449 86.0832 42.3299 85.2992 43.2969 85.2992 cv
44.2649 85.2992 45.0499 86.0832 45.0499 87.0512 cv
cp
@
58.0629 77.7992 mo
58.0629 78.7672 57.2789 79.5512 56.3109 79.5512 cv
55.3429 79.5512 54.5589 78.7672 54.5589 77.7992 cv
54.5589 76.8312 55.3429 76.0472 56.3109 76.0472 cv
57.2789 76.0472 58.0629 76.8312 58.0629 77.7992 cv
cp
@
36.3349 78.9672 mo
36.3349 79.9352 35.5499 80.7192 34.5829 80.7192 cv
33.6149 80.7192 32.8299 79.9352 32.8299 78.9672 cv
32.8299 77.9992 33.6149 77.2152 34.5829 77.2152 cv
35.5499 77.2152 36.3349 77.9992 36.3349 78.9672 cv
cp
@
27.5269 71.2802 mo
27.5269 72.2482 26.7419 73.0332 25.7739 73.0332 cv
24.8069 73.0332 24.0219 72.2482 24.0219 71.2802 cv
24.0219 70.3122 24.8069 69.5282 25.7739 69.5282 cv
26.7419 69.5282 27.5269 70.3122 27.5269 71.2802 cv
cp
@
gsave
.852936 .799194 mo
.852936 127.743 li
136.753 127.743 li
136.753 .799194 li
cp
9.46594 .838165 mo
7.01294 .838165 li
7.01294 5.25418 li
8.25194 1.74921 li
9.46594 5.25418 li
cp
eclp
8.25194 127.354 mo
8.25194 1.18918 li
@
grestore
9.46594 5.25418 mo
8.25194 1.74921 li
7.01294 5.25418 li
9.46594 5.25418 li
ef
.350458 lw
9.46594 5.25418 mo
8.25194 1.74921 li
7.01294 5.25418 li
9.46594 5.25418 li
cp
@
gsave
.852936 .799194 mo
.852936 127.743 li
136.753 127.743 li
136.753 .799194 li
cp
136.519 121.559 mo
136.519 119.106 li
132.104 119.106 li
135.608 120.344 li
132.104 121.559 li
cp
eclp
.175229 lw
1.24194 120.344 mo
136.169 120.344 li
@
grestore
gsave
.852936 .799194 mo
.852936 127.743 li
136.753 127.743 li
136.753 .799194 li
cp
clp
132.104 121.559 mo
135.608 120.344 li
132.104 119.106 li
132.104 121.559 li
ef
132.104 121.559 mo
135.608 120.344 li
132.104 119.106 li
132.104 121.559 li
cp
@
.175229 lw
1.24194 29.2252 mo
134.417 111.583 li
@
grestore
.175229 lw
305.406 37.9872 mo
308.911 41.4912 li
@
305.406 41.4912 mo
308.911 37.9872 li
@
319.424 50.2532 mo
322.929 53.7572 li
@
319.424 53.7572 mo
322.929 50.2532 li
@
301.901 52.0052 mo
305.406 55.5102 li
@
301.901 55.5102 mo
305.406 52.0052 li
@
319.424 60.7672 mo
322.929 64.2712 li
@
319.424 64.2712 mo
322.929 60.7672 li
@
289.635 46.7482 mo
293.14 50.2532 li
@
289.635 50.2532 mo
293.14 46.7482 li
@
269.145 45.5102 mo
272.65 49.0142 li
@
269.145 49.0142 mo
272.65 45.5102 li
@
306.738 68.8272 mo
310.242 72.3322 li
@
306.738 72.3322 mo
310.242 68.8272 li
@
286.575 30.8372 mo
290.079 34.3422 li
@
286.575 34.3422 mo
290.079 30.8372 li
@
303.21 27.1222 mo
306.714 30.6272 li
@
303.21 30.6272 mo
306.714 27.1222 li
@
275.033 30.4402 mo
278.537 33.9452 li
@
275.033 33.9452 mo
278.537 30.4402 li
@
272.112 104.574 mo
272.112 105.542 271.328 106.326 270.36 106.326 cv
269.392 106.326 268.608 105.542 268.608 104.574 cv
268.608 103.606 269.392 102.822 270.36 102.822 cv
271.328 102.822 272.112 103.606 272.112 104.574 cv
cp
@
247.58 92.3082 mo
247.58 93.2762 246.796 94.0602 245.828 94.0602 cv
244.86 94.0602 244.076 93.2762 244.076 92.3082 cv
244.076 91.3402 244.86 90.5552 245.828 90.5552 cv
246.796 90.5552 247.58 91.3402 247.58 92.3082 cv
cp
@
277.369 94.0602 mo
277.369 95.0282 276.585 95.8122 275.617 95.8122 cv
274.649 95.8122 273.865 95.0282 273.865 94.0602 cv
273.865 93.0922 274.649 92.3082 275.617 92.3082 cv
276.585 92.3082 277.369 93.0922 277.369 94.0602 cv
cp
@
293.14 95.8122 mo
293.14 96.7802 292.355 97.5652 291.388 97.5652 cv
290.42 97.5652 289.635 96.7802 289.635 95.8122 cv
289.635 94.8452 290.42 94.0602 291.388 94.0602 cv
292.355 94.0602 293.14 94.8452 293.14 95.8122 cv
cp
@
254.589 104.574 mo
254.589 105.542 253.805 106.326 252.837 106.326 cv
251.869 106.326 251.085 105.542 251.085 104.574 cv
251.085 103.606 251.869 102.822 252.837 102.822 cv
253.805 102.822 254.589 103.606 254.589 104.574 cv
cp
@
261.599 87.0512 mo
261.599 88.0192 260.814 88.8032 259.846 88.8032 cv
258.879 88.8032 258.094 88.0192 258.094 87.0512 cv
258.094 86.0832 258.879 85.2992 259.846 85.2992 cv
260.814 85.2992 261.599 86.0832 261.599 87.0512 cv
cp
@
274.612 77.7992 mo
274.612 78.7672 273.828 79.5512 272.86 79.5512 cv
271.892 79.5512 271.108 78.7672 271.108 77.7992 cv
271.108 76.8312 271.892 76.0472 272.86 76.0472 cv
273.828 76.0472 274.612 76.8312 274.612 77.7992 cv
cp
@
252.884 78.9672 mo
252.884 79.9352 252.099 80.7192 251.132 80.7192 cv
250.164 80.7192 249.379 79.9352 249.379 78.9672 cv
249.379 77.9992 250.164 77.2152 251.132 77.2152 cv
252.099 77.2152 252.884 77.9992 252.884 78.9672 cv
cp
@
244.076 71.2802 mo
244.076 72.2482 243.291 73.0332 242.323 73.0332 cv
241.356 73.0332 240.571 72.2482 240.571 71.2802 cv
240.571 70.3122 241.356 69.5282 242.323 69.5282 cv
243.291 69.5282 244.076 70.3122 244.076 71.2802 cv
cp
@
239.52 11.3522 mo
239.52 12.3202 238.735 13.1042 237.767 13.1042 cv
236.8 13.1042 236.015 12.3202 236.015 11.3522 cv
236.015 10.3842 236.8 9.60019 237.767 9.60019 cv
238.735 9.60019 239.52 10.3842 239.52 11.3522 cv
cp
@
gsave
217.402 .799194 mo
217.402 127.743 li
353.302 127.743 li
353.302 .799194 li
cp
226.015 .838165 mo
223.562 .838165 li
223.562 5.25418 li
224.8 1.74921 li
226.015 5.25418 li
cp
eclp
224.8 127.354 mo
224.8 1.18918 li
@
grestore
226.015 5.25418 mo
224.8 1.74921 li
223.562 5.25418 li
226.015 5.25418 li
ef
.350458 lw
226.015 5.25418 mo
224.8 1.74921 li
223.562 5.25418 li
226.015 5.25418 li
cp
@
gsave
217.402 .799194 mo
217.402 127.743 li
353.302 127.743 li
353.302 .799194 li
cp
353.068 121.559 mo
353.068 119.106 li
348.653 119.106 li
352.157 120.344 li
348.653 121.559 li
cp
eclp
.175229 lw
217.791 120.344 mo
352.718 120.344 li
@
grestore
gsave
217.402 .799194 mo
217.402 127.743 li
353.302 127.743 li
353.302 .799194 li
cp
clp
348.653 121.559 mo
352.157 120.344 li
348.653 119.106 li
348.653 121.559 li
ef
348.653 121.559 mo
352.157 120.344 li
348.653 119.106 li
348.653 121.559 li
cp
@
.175229 lw
237.067 2.94119 mo
314.167 123.849 li
@
[1.40183 1.40183 ] 0 dsh
217.791 29.2252 mo
350.966 111.583 li
@
grestore
%ADOBeginSubsetFont: GFNBAA+CMR12~15 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
ZWJIEH+CMR12~15 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B08A9576E61A96850602D841C8C951EAEA905BE7FA8BD0
9F148793A0C9FD5FA15CED6C5EDB8FAAA97CF4FAAFFD5C7A40B5F92E278A8C59
9749D03CC812DB86378A187F64B507> |-
/z <1C60D8A8C9B08A95B5589A17E299A289971DBC84D6FE3644F5078E695F71
379ABEE348BF5BE09043FEFE2C6D152D28EB92C3974570BDC783E3DA2583C1DD
73149223E1A539A1FC262E8AB47762538D726DD73155FAAD007C1D92D0DB3B19
9D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZWJIEH+CMR12~15 /Encoding get
dup 58 /colon put
dup 122 /z put
pop
%ADOEndSubsetFont
/ZWJIEH+CMR12~15*1 
[12{/.notdef}rp /fi 21{/.notdef}rp /quotedblright 4{/.notdef}rp /quoteright /parenleft /parenright 
2{/.notdef}rp /comma /hyphen /period 2{/.notdef}rp /one 7{/.notdef}rp /nine 
/colon 6{/.notdef}rp /A 4{/.notdef}rp /F 6{/.notdef}rp /M 5{/.notdef}rp 
/S /T /.notdef /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i /.notdef /k /l /m /n /o /p 
/.notdef /r /s /t /u /v /w /x 
/y /z 133{/.notdef}rp]
ZWJIEH+CMR12~15 nf
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
.852936 157.632 mo
(T)sh
8.32126 157.632 mo
(o)sh
18.7933 157.632 mo
(mak)
[9.75529 5.84602 0 ]xsh
40.2396 157.632 mo
(e)sh
50.066 157.632 mo
(the)
[4.543 6.50365 0 ]xsh
70.93 157.632 mo
(algorithm)
[5.84602 3.23979 5.84602 5.84602 4.543 3.23978 4.543 6.50365 0 ]xsh
124.919 157.632 mo
(w)sh
133.035 157.632 mo
(ork)
[5.84604 4.54297 0 ]xsh
154.219 157.632 mo
(for)
[3.56268 5.84601 0 ]xsh
172.797 157.632 mo
(non-linearly)
[6.50366 5.84601 6.50366 3.8974 3.23978 3.23981 6.50363 5.20044 5.84604 4.543 3.23978 0 
]xsh
238.155 157.632 mo
(separable)
[4.61469 5.20044 6.50366 5.84602 4.54297 5.84607 6.5036 3.23981 0 ]xsh
290.269 157.632 mo
(datasets)
[6.50366 5.84601 4.54297 5.84607 4.61469 5.20044 4.54297 0 ]xsh
336.607 157.632 mo
(as)
[5.84607 0 ]xsh
351.694 157.632 mo
(w)sh
359.81 157.632 mo
(ell)
[5.20044 3.23981 0 ]xsh
-16.706 172.077 mo
(as)
[5.84602 0 ]xsh
-.836342 172.077 mo
(b)sh
5.99124 172.077 mo
(e)sh
16.5827 172.077 mo
(less)
[3.23979 5.20044 4.61469 0 ]xsh
39.6615 172.077 mo
(sensitiv)
[4.61469 5.20044 6.50365 4.6147 3.23978 4.543 3.23978 0 ]xsh
77.4624 172.077 mo
(e)sh
88.0719 172.077 mo
(to)
[4.543 0 ]xsh
103.861 172.077 mo
(outliers,)
[5.84602 6.50365 4.543 3.23979 3.23978 5.20045 4.543 4.61469 0 ]xsh
150.609 172.077 mo
(w)sh
158.726 172.077 mo
(e)sh
169.326 172.077 mo
(reform)
[4.543 5.20044 3.56265 5.84604 4.543 0 ]xsh
202.453 172.077 mo
(ulate)
[6.50366 3.23978 5.84601 4.543 0 ]xsh
233.194 172.077 mo
(our)
[5.84604 6.50363 0 ]xsh
255.487 172.077 mo
(optimization)
[5.84605 6.5036 4.54303 3.23975 9.75531 3.23981 5.20044 5.84601 4.54297 3.23981 5.84601 0 
]xsh
325.194 172.077 mo
(\(using)
[4.54297 6.50366 4.61469 3.23981 6.5036 0 ]xsh
%ADOBeginSubsetFont: BMGBAA+CMMI12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
ZWJIEJ+CMMI12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/lscript <1C60D8A8C9B08A95BCCB860CB2036BBD5C7FD16042EF0EBE51A4A6
AA96AA0AD6BFF8F8CC30BA79AB6525E47A761F0B2E2DE2C5D6B5BD36B7B26C9E
D5BFD444A14D224D615C3AFB9CFD589A230F69DC38483E438663EDCA4268E006
ECE491182411269442033D27D892DBD8460627ED7854CC43F4FB799C624BAB4D
E0428CE2ED1A8C6BC6B1F0627FF4E4AACB53A84FE26754C6D9F49ADFA02B88B3
080ECE185C72FCDD8A3E8F1D849DB2BA38C8E60DC1CF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZWJIEJ+CMMI12 /Encoding get
dup 96 /lscript put
pop
%ADOEndSubsetFont
/ZWJIEJ+CMMI12*1 
[30{/.notdef}rp /phi 65{/.notdef}rp /lscript 159{/.notdef}rp]
ZWJIEJ+CMMI12 nf
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
361.845 172.077 mo
(`)sh
%ADOBeginSubsetFont: MZQAAA+CMR8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /MZQAAA+CMR8 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
def
/FontBBox {30 -250 766 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 683 704 431 446 665 675] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [33] def
/StdVW [76] def
/StemSnapH [28 33] def
/StemSnapV [76 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/one <1C60D8A8C9B08A95D352586DE3151F73D080760F4072C70D020E9A3374
3E27CC12AFB8D60F7B2CAF43AD29E1A85BA640AC20D13558A6A5C1F9934B0BBE
EBF6ED7D0617E20D20EB2361EFF0C24341E697FA8D5ECA9ABB3D03C7ED139E> |-
/.notdef <1C60D8A8C9B08A9596FE72ACE143EF> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZWJIEK+CMR8 /MZQAAA+CMR8 findfont ct_VMDictPut
/ZWJIEK+CMR8*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
ZWJIEK+CMR8 nf
ZWJIEK+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
367.108 173.868 mo
(1)sh
%ADOBeginSubsetFont: ELRBAA+CMBX12~29 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ELRBAA+CMBX12~29 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 122 /z put
def
/FontBBox {12 -251 1025 750} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 0 686 698 444 453 656 676] def
/OtherBlues [-201 -194] def
/BlueScale 0.04379 def
/StdHW [43] def
/StdVW [109] def
/StemSnapH [34 43] def
/StemSnapV [109 132] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/a <1C60D8A8C9B08A95C96620E75CABF74F978CA2083A0E64E7B623771A69DF
79A1496F53320155EF6230CD76629B835BA61D1C7BFCD72D659594C6AFFB6C7E
802398A50994BCE7C5C23BAD243919C88907ECAC871D06C6ED4716017399C9EC
CF9F0CBBC933CEBADE976E377B66E4C69C303DE103F96D7C380F870339E353E7
7FC482A6D935576C31AAF7658321BC33D26C3416CD755FAD92DB> |-
/e <1C60D8A8C9B08A95D42639199D9EF7781EC08E4E816F8C01343D37A2B105
E8AB8AB1FDB0848649E86059672D957228B313AF0FFB4A960C20DE2B4265D70D
66B815EB8FC372D276F1A9CE1A93C25C791CD56D083C270295D962C8810A8BD7
F499D3451B2F8F01171F6D284CAC7B6BC2814387EA62B9A817646426C183F0FC
4C995381> |-
/g <1C60D8A8C9B08A95090CFBBDE9151CD9A545C89D314E9D050C555FD62D76
9B2D2184D76B72767ADC7088034EE87417AC436D4376EDC3823E6912BB8DD976
F98FB6E796730264EEF293473C5B7C47AB429FDA19BCD67D64D3235AA06478E1
7CF4A4D7E12C404944B53A685EDDEC83872606C4530A355BFB62F3B8115B744B
C76F1462D082A3E9C7F630F2AA7A638C4145A1DFCEAA23F1451490F348BBB076
CA017A510FE32CFF5BCFDD06235E6B66BDF1B9E277D6ED5B6BAD24BE6ECE520A
5ACA4683C9DBB80D2B6F5E7EE0AA4F472874B443D52E23A29F49BD46493F8DD1
456D03C3F38A192AE5CBA2BE6C2507C34B0EAA2771> |-
/i <1C60D8A8C9B08A9510AF83E41B62DF17FA6FFE42F43376AE7BE112262DFB
81CF6A7782777BCDF754B6FFCE8A9120C0B23C1D4FAF93ECD8BF7E9BD82B6C4C
6069D0A0051D66536257C9D076E038A24B6A9614C7660C9B1DF04367740F915F
7836D1> |-
/l <1C60D8A8C9B08A9510AF83E41B62DF17FA6E185551178BEEEEB016EDC0AF
4A1E00C264F4E1282BA3DF5A515FAD7EF638817EAC00A088FF13BF1B4A9C8501
269A94E94B> |-
/n <1C60D8A8C9B66482C0B06145CAB2A52064D0AD13B76D62A68E1CA85E83A9
47C22FBA1D333B3A91CB07B97058C1EF7B16D7A29F4CB41AAF1054B7F9FF73A4
8366745DAD5772EA1083F2CD2134C17AA9253B4CE26CF4115B4E8E2826BE89C5
4CAB6AF786691F9984077D22ACBC935D59D9FF0E5291F2B85B9B8DEC535E> |-
/o <1C60D8A8C9B08A95090CFBBDE9156259107B60BFA8F4BE78F35EE5F5532B
20F872A831BD64277FFE251C33744D46B86CAED0C86D4A85BB61FD8C039175A1
5A18F6F3B55384A4B8C68BFE41879F59BF31FADBC3B0C1CC9252A6A4F0C4E11B
CD56383A373EAC364FCEC6C8B9F0D522EC243A> |-
/r <1C60D8A8C9B08A95AFB286DB4B4ACF2D4077830A706B90C389169C2A4881
7D65C3E75289597BC4105D7C75DB52C1CE0B8FFDBE4F7EBD7A6600F4AC6B4128
1ED22DDF987378B21991DD05C05E013BBE0C5447535502C477B093C474BBAF68
FE5F897D1A3C8CA07B2FF3C72D859FABD3F0A0> |-
/t <1C60D8A8C9B08A950D39B484C8B6266357FB741549CEA596AB57C14CF303
B67CE71D4CD630CA27C189CF57DAC62FC17FB535F136E1998F8F661347D6BA89
649FA6B233D745EED36E1882B9AACF4ADDA047134106AA71EA23E81C61C5A6> |-
/u <1C60D8A8C9B66482CEFC1B8CDC3949FF8FF7FA8B3D746DCFA850E7C90E66
51F149761B0B7FC876B87357E80C6EB689A294BAF1011E6B9B0AA8FF0696D242
D20786BCB0155C86B1F327CB83E7D276B9E5F44F9930F1AC79F1D53EBA592188
F3588C7F> |-
/z <1C60D8A8C9B7A73DC57C22BB023E4E10C5A31D553E4A5F270071B39C59BF
1DDE5565D6ADFDB63DC276BF28ADE63EF945189B465DA45AA637771D7EC370E5
2F6C284898533363D93C906BE96C51E6E8CDD12290D9468C254EEA8D354CE0> |-
/.notdef <1C60D8A8C9B72482E3> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZWJIEL+CMBX12~29 /ELRBAA+CMBX12~29 findfont ct_VMDictPut
/ZWJIEL+CMBX12~29*1 
[97{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /.notdef /i 
2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /.notdef 
/t /u 4{/.notdef}rp /z 133{/.notdef}rp]
ZWJIEL+CMBX12~29 nf
ZWJIEL+CMBX12~29*1 [11.9551 0 0 -11.9551 0 0 ]msf
-16.7059 186.522 mo
(regularization)
[5.48739 6.13297 6.71872 7.4599 3.72995 6.52754 5.48738 3.72995 5.96552 6.52756 5.22433 3.72995 
6.71872 0 ]xsh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
64.1946 186.522 mo
(\))sh
72.6616 186.522 mo
(as)
[5.84602 0 ]xsh
87.0283 186.522 mo
(follo)
[3.56267 5.84602 3.23979 3.23978 0 ]xsh
108.439 186.522 mo
(ws:)
[8.44023 4.61469 0 ]xsh
60.1631 220.254 mo
(min)
[9.75529 3.23978 0 ]xsh
%ADOBeginSubsetFont: AXNBAA+CMMI8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /AXNBAA+CMMI8 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /gamma put
dup 59 /comma put
dup 98 /b put
dup 119 /w put
def
/FontBBox {-24 -215 907 704} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 683 704 431 441 452 463] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [78] def
/StemSnapH [28 32] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/gamma <1C60D8A8C9B08A95C903148B6630ED84C5240D4722754412A9C7AE3D
82AFAC95183D1EF41C0AECE98A6CDA2C9B35BDD86C979A42635285D931925E69
780FB863FEE181F695AD6D101680D4B99095B5EA124C16A346A220F0D62AE860
360F454840D4311545FF221E9893B25C9EAE957491FDB5205C3D5501362C31ED
B6E470040572F2D959AAEB7B67717ABB8ADC5E3CF9AC813E> |-
/comma <1C60D8A8C9B08A956F7E0F548729E1EAF5C3825DA50E6E8CA95346DE
EC787FE4DC4F8890804BF43E7E0E348444E7C1660C6A9B0FC84DD9D721B868A7
89AFFB610170025DD1AAD2549A9CAA70> |-
/b <1C60D8A8C9B08A95ADBF40CF746E6A112D42AC198C1FCE85BE4F25EB5EBC
D834945D9D6E97EEBEC41886777E09E5DC2DD2972590407B9732E0702D228E6E
752FBF1306300616373C9D03AE7E59737C3FA10A7FB8506C7FFB4F749E0B0938
47DB51E1630F3FDBF141C6B5BE316944C7C443FA3CDAD456028AAF2503F14862
5C71B96BA3558118352C6A881B8B3E3F771AB4990334EE2863638582252EA35F
3916697B0ECDED7C3390654616415D39C51457489A> |-
/w <1C60D8A8C9B08A9467F3C7EF8D9E967E1D782716C65329015C23B0393981
7F3F6CD4D746886F1A39106CADB53F8765AFF9386552D6741E83ED7D274A533D
8F9DB261AC29C2E91174B288CF59CCE6B983D1DBD5DB73AD1248B28F4ED101FC
AFBEA92E0B8DDD451ACBD165E8C82FEDD1EA7307EA1F8102E50C8518B178ADA0
D62AB2A5E198F64C29BD95B98E423A72A6603F04FED120493CC49580485A9AB6
EA80572249C46B0CB513A15420FB0A83F238F299DCA0AE43C90BBB67070493BE
961F8A270D8CAEEFA7837B334972FC03657ACC17B84574D9B42A0E8652285596
5D033116F37F6F70FD2E6495D01F> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZWJIEM+CMMI8 /AXNBAA+CMMI8 findfont ct_VMDictPut
/ZWJIEM+CMMI8*1 
[13{/.notdef}rp /gamma 45{/.notdef}rp /comma 38{/.notdef}rp /b 20{/.notdef}rp /w 
136{/.notdef}rp]
ZWJIEM+CMMI8 nf
ZWJIEM+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
79.6661 222.045 mo
(\015)sh
84.4937 222.045 mo
(;w)
[2.34326 0 ]xsh
93.1261 222.045 mo
(;b)
[2.34326 0 ]xsh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
110.779 212.172 mo
(1)sh
.486 lw
110.779 217.266 mo
116.638 217.266 li
@
%ADOBeginSubsetFont: GFNBAA+CMR12~15 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
ZWJIEH+CMR12~15 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B08A94675A26C47CC22BC6A636FFB1D0D694241CB0E9FD5
2AA666BF73E856529E8CF5A5376A07A85DC01EEC35ED77FFAA6DD10B27BBE551
86A1FB1B715729A5CD0246F20F7ADF2321D52035999E889D27EEB7F75255B86F
835EAAAF5> |-
/zero <1C60D8A8C9B08A95A31CD7D9F2175159B2EE9CA208FFB7967FE88B2A5
EFDCBAB8ABA3B229FD8BD2B0520BBA9CA6FBEE131FA6F30A775F5BB18ED2CE54
FE5FF73C5C50E8D08153CC5D0EA50A0508731BE523005DFDBA40260BDAC00E48
F0AEE9028989588C75514CF992A617A0C3ABE27E0E7C538D37554C743D81E845
4DCBDCA25D0527EFE6C9F1D874CDA0E1BD896E865391C0580207B4D10D36FCF> |-
/two <1C60D8A8C9B08A95A31CD7D9F217ACF5618BBEBEBAF6B1A492649A99EB
28A9DBC54B17560D3F8EBF37304DCC5AF234D5600EA9340D280339209D532268
64624A9F926921712C917F7CFB98990646B6C201964C77694A0B5C2B68B82E69
364900A022CB6DBAB1AA36F03BB6E1CDC3AE7E28B55A946FFD6B70C6BECD35CA
E0575F98394980688F169A691A> |-
/equal <1C60D8A8C9B08A94675A26C47CC2E2E8C23D06C121924EAD3244A736
CAAB70EB573B766488963EA6C9BC1D46F46136B563A5ADAF290E26895609B5AE
763548738271E12AC93ACEC92A03F9B60348C791CD41F8E887> |-
/j <1C60D8A8C9B08A9568507F331720577E6EF1CAE32578502A79FBD6C8F6F5
88F93709E897A3C811AF975D3E569173469880ABBDBA6996077B5C72276000C9
3DF5957A3098B78A86863C7FCC738B654F8A9EA6D9ADCC0F79F2E41BBBAFDEC9
E8DB3EE356D31F3B461C309F19766D59B9F05521C5AAA0173E2D897B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZWJIEH+CMR12~15 /Encoding get
dup 43 /plus put
dup 48 /zero put
dup 50 /two put
dup 61 /equal put
dup 106 /j put
pop
%ADOEndSubsetFont
/ZWJIEH+CMR12~15*1 
[12{/.notdef}rp /fi 21{/.notdef}rp /quotedblright 4{/.notdef}rp /quoteright /parenleft /parenright 
/.notdef /plus /comma /hyphen /period /.notdef /zero /one 
/two 6{/.notdef}rp /nine /colon 2{/.notdef}rp /equal 3{/.notdef}rp /A 
4{/.notdef}rp /F 6{/.notdef}rp /M 5{/.notdef}rp /S /T /.notdef 
/V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c 
/d /e /f /g /h /i /j /k 
/l /m /n /o /p /.notdef /r /s 
/t /u /v /w /x /y /z 133{/.notdef}rp]
ZWJIEH+CMR12~15 nf
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
110.779 228.462 mo
(2)sh
%ADOBeginSubsetFont: YEKBAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /YEKBAA+CMSY10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 21 /greaterequal put
dup 32 /minus put
dup 106 /bar put
def
/FontBBox {0 -960 943 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 683 705] def
/OtherBlues [-124 -119] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [85] def
/StemSnapH [40 55] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/greaterequal <1C60D8A8C9B08A9461828376290081FDEE89FFCA15C371D7A
DF605184B13BE3E9A7F6FFADDEA71B790A60C67CF2BF2D96D7CCFA61625788FD
ED8F9015D2498372F009A23F7FA67F2BB68433CA99D5567B1DB1FF5655285402
CEFF734067E2AF1D237FED0E27E730A1DC80064248626A73465F780CF4CFD27A
75206DDAB71FADA9CBFA349> |-
/minus <1C60D8A8C9B08A946182837629008DF77029D0DCA9EAAC6FDE097987
58BCCF6675E7C19F7931203606CBFE6DE670D5E52EADBA70> |-
/bar <1C60D8A8C9B08A95708109816759180BE2C00E10A590409BF5B08FAC84
21BA7EC8F21D16187F3B3A4AC3A89C0BBA4359110097436534A5> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZWJIEN+CMSY10 /YEKBAA+CMSY10 findfont ct_VMDictPut
/ZWJIEN+CMSY10*1 
[21{/.notdef}rp /greaterequal 10{/.notdef}rp /minus 73{/.notdef}rp /bar 149{/.notdef}rp]
ZWJIEN+CMSY10 nf
ZWJIEN+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf
117.826 220.254 mo
(jj)
[3.31148 0 ]xsh
%ADOBeginSubsetFont: BMGBAA+CMMI12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
ZWJIEJ+CMMI12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/xi <1C60D8A8C9B08A95BB72E5BC50CF9E32457F422DCAB3ED37553F148F45D
2B595801926A8FBF36F6DBED12FB532FFE266A72496DDD9F047DF11A219D7A0E
CC70C9441DE4E3A1CF5ECB5215872253635B9B25F7968E6916DAF4F3D629E17A
87B4E09960007647DBCDF85A6D9B067C7469A1A1682D6F599DE6D9702FE6594B
5E9BEDF00271FD25F016FD4D93309026C94E307A35D13397531F5D1745CE4EF5
35B6620A9EE4F125F5A077890FB289A614422F0FB680D6AFE081728D1A0948CD
7C2563EF7D505F3A0778812527AB7F02BA0BF75E06C354EB99F01D55566562DC
3362228CC4245842509EA685537D0749F02A73FFDE318A006513960CC19DC375
B53022D8244158F7AA295B4F5A43FC6B3CA37A943D02616C079419A14704A4DE
1CBAABB41F670763861013ECC915C93E3E5BE969B3D3CCAE08F8D5342257CB73
D4E04DCA643D910DEB78E157774C51B97> |-
/period <1C60D8A8C9B08A9576E61A96850602D841B4E7DDDF6FA64B894823E
7E128527DE09926E6517915C1B84A3228310B> |-
/comma <1C60D8A8C9B08A9576E61A96850672D189A5C57799069A34E49D37EB
CAE99A89E87B05673BCD5361B1D582B00E81010603A364ED106E1F09FF947CDA
B614D53681A7FB1EB57146ADD6BAF1F308EE996046790E507E5CA2440A> |-
/C <1C60D8A8C9B08A945F16CE5A3F89D2A3280DADBD5EEBA4474D17B65FF58C
5BC6046F6C18AC5836DE2F8210E06C4206BBB6AB3249F7581C4BDF94F954B849
36CB68D75C0BF9FAFAAE1D307917C5605ED70F6E12DA34BDC81A66F9B0CB98BA
A2CB8D07B736E620A19C6F12CEE63C56A395314F4A443BB2FBD3C4FD182C147B
7153634FDBD4C645739B165E2DE99F6F1C069F5A38719DE31F8567> |-
/b <1C60D8A8C9B08A95BE770D3275FAE599DCE86302389D928C94B9FB808161
126B995C909B008B4451AF1E806CE818A251FE177676361252477545A657736F
25D51219F5E6834E98D2054B58CFB9D2B5578BF4D1003930699AF984C4199197
601B81DCE577536D6D459C7A0B882E65C0798A7BA5C6ADB75EF40A72A5BE8FD3
19E1C755B4CCC49634DC5D718F4D50BDFB257FF2B21A754EE142C24492CAD395
AC8DF13571897F211E679FA35DB0D92FBF398962906CEB6EC06C> |-
/i <1C60D8A8C9B08A959E61380297A094C39C9D2731047B7945D0E1739197E0
75C9F08C8A422DBFB37970B55F9550C5898AD35B7F2F2480AB8798D06F9069EE
1B47E5035DE132FEDB4EC3207A0D5BCF1DE46911E02BE54E36B186E7E7D19D14
5F73239374B590822F746281AD1FF498C52C5EA3561FB2BF0FA447E6458AEADB
A83EEBA91925F62279206C62D818480CC5C56AE96699E7D64AEF035D310C9F57
31ED91D0B8164CF4AD656003FE272F839DB64F2656A851BFE123E398> |-
/m <1C60D8A8C9B08A94009736013DEBA85BB29D1110A14598D2F9524B005B8F
F0E60E31D5E8DBAADB8713C5E671A0A529E563992AE25BA7ED40B2E688B50A9C
052A402A3A28A9334354DE41EE49B63873FB8E451BAD5F4B8FDC599594E59EEA
43AFA5A3ED6B600F75CAF2260D461FBCF6A459419DDFADE82EC4C01A033676A9
7E94C7FD641CD73F442E6D8E284D352B29C91C8313AE031E995F6471CF79D145
8402C7FC010D3262DA51883E1C51227A591AB41054D3A04A1D770DB5E50777FC
BCF6BE3322A6A39958A9E5400157B98AB09E18C2B8EDE6A73B439F5F9DC4C18B
43D5DBC0EE57E22783A5D908C6257F319DE6BB9877BC2246115FDC0DA1C94E18
32C325F8E6ABD345A09CBC330B2E81BF567240FE1E9A255FAA3F8E681C4D1B3A
4ED3BEB42C54B2D9AC32D8A998A914F05732E3DEC14DC3BC> |-
/w <1C60D8A8C9B08A945FDAC3BC1DEE28A82BF61898F060D73D9D51460706C7
247F31E890C26698EE904D19C05AE20602641725E6E36507997680DBFDE80CD2
9495B3C4BA855413A861BF13E33CD85AA02591A356AC863C1B43B1487665C69B
E848DD4DCEB156BD5041A0022C6A33C15FF939F96CCF3E64A7B9AB8B3F617F6D
C3FDDAA98FE5960E6C20983BA60979218CD6A5D3842CFE0A8547DCACD1FB901D
6D8B70186DF337DB45F0E3A123A6359F2471590C1273C99FB1B22DAE47717D1D
EAE3F0CD461F72005714FF8C2D748F9548EE890B04BE69554E1515DF65565DE6
F945EFFE0934C359D8415FEED0EEED0C5D512CCAB80BB21935B19B6811AA4983
7644CE8E8A66BCA35061DB6E23F04682DD0DA02C5D0905ABF2A3CE1EA6E07CCF
D9D3110600A961835795> |-
/x <1C60D8A8C9B08A95C5D76C652FE20E6800448BC9090789627112662D5CAF
4874E4BAE5ECACE99000C52A505FBD88AA8D0719D228289650EC4B23E64183A9
13506186FBF0473DC7976B31C32AC697EA9D5E918F4658EC8938657093EBACB4
DA5F2B3C39E8828C1562F4F6E800AC35C9FB4D0DEDC20DFB466F1505BE88CF27
B95976AD37DFFAB66221B45B9E95963231C3DD556447DA18E67C5EDD9AA19EB0
7AE97FC0FFC97DFA65AED4129F8106DB01E9A9BFDCF0C359DF05BF92CED49B39
724BACA7A8BC5C20C669D817090C21E3F5C2AE24A38638711BA1E3AD90338162
57801716BE4EA19BCD> |-
/y <1C60D8A8C9B08A95A6F016C60A52A306A09C5675FB38BA2E86B0A44207EE
60CF40339C925F40A5EFB803A7A0B9CA638E14142A39F1297B72B31274129805
94CA3AD05C4E10195B3EA121A222EC732668C557EA75A06628054D9A38307738
AC3833CE5564F74B1F67D25B1F19145F46D836266889276C6EA1FB08326FBCDE
61DF624F01AD012AD703ED68455F30D2335A20A7FB21C0F1BA2179778C71A005
7148EB49EF16E731314A6E76C8BF8DCCE4CF0D7C38FDA5B0CAB10A682E1D3406
D59B43148A7ACE72BE5E52831041987D844B1A3609633FB9B99D80D6A977A350
B28014C6C73FADBC5C48F1AD101F462A1A5A3B728406> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZWJIEJ+CMMI12 /Encoding get
dup 24 /xi put
dup 58 /period put
dup 59 /comma put
dup 67 /C put
dup 98 /b put
dup 105 /i put
dup 109 /m put
dup 119 /w put
dup 120 /x put
dup 121 /y put
pop
%ADOEndSubsetFont
/ZWJIEJ+CMMI12*1 
[24{/.notdef}rp /xi 5{/.notdef}rp /phi 27{/.notdef}rp /period /comma 7{/.notdef}rp 
/C 28{/.notdef}rp /lscript /.notdef /b 6{/.notdef}rp /i 3{/.notdef}rp 
/m 9{/.notdef}rp /w /x /y 134{/.notdef}rp]
ZWJIEJ+CMMI12 nf
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
124.449 220.254 mo
(w)sh
ZWJIEN+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf
133.142 220.254 mo
(jj)
[3.31146 0 ]xsh
%ADOBeginSubsetFont: MZQAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
ZWJIEK+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B08A950C44F05CDCAE3556D5BFFD62B009C0B3B821
25981D18323152B2B6A863B59802588509844D5C450E787BDF1F67EF6737AA85
9C0B172FEA3503B841E7D52DA8692986501E2B70DAE33846C5D5ACF886D1687E
A39B7566970DC4F54B09851874B834> |-
/parenright <1C60D8A8C9B08A950C44F05CDCAE3556D5BFFD62B009BC0AC70
FCAD6432BD4B1430880FACC41CEAD67CB99B3AE721B7BD76F88AC2304CDDF404
13B0316C093D5BD3A87DBD68A4670759C46D15C001D9741BFA1DE3E7E79454D7
97448D815A18DCDD9B09C68D3060DDD5B2C6C3C08CF7A> |-
/two <1C60D8A8C9B08A95D352586DE3151F02B2E7A581ACA5976FB7284E749D
E6D7AF4C8FC11EE4A14EF82C458ACA8A43B34FC4222AFA194EC2DD4A06B124E7
3AC24B7895CC3720939D84FD1922D6FD4D293DB587B2066F11142063C68061C7
90184E748A436355C42CE1A8844E4FCC2D5E9DE7C06A7BADCB40D99F4B899654
A50500A53D531948080CB3979954E0> |-
/equal <1C60D8A8C9B08A953C5C2645FEB08D75A07C9DD66D4F0C3EFD8F53D5
BA989F7C83975F40856E6D4BF6ACCD0229D80C98D0FC5F05CCF3B0B111AA5FC2
94ABBC19995BB789E6761FF9FECBA53E54B85D33AD4E5C75D5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZWJIEK+CMR8 /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 50 /two put
dup 61 /equal put
pop
%ADOEndSubsetFont
/ZWJIEK+CMR8*1 
[40{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one /two 10{/.notdef}rp /equal 
194{/.notdef}rp]
ZWJIEK+CMR8 nf
ZWJIEK+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
139.804 215.322 mo
(2)sh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
147.184 220.254 mo
(+)sh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
158.937 220.254 mo
(C)sh
%ADOBeginSubsetFont: AXNBAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
ZWJIEM+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B08A95ED6CB397CF12F5E99E6AF6BE44301B4D463D8B4D6A83
4F0A40E8A1A7AFCF8CAA6CEA8480EC0F2AD9B15025BC1092A3D84D8FB0F856AE
7ABC79348DA9C7F16B104405117106445C34A8D7EC3BF6CE4C7F2BB6C86FB252
2CCD447D2EC00FB1095602E573DD15A72DF6C2C655F5B125C025672515F84F13
A42030FB1CC0CDFEE82C6B48078E3476345E96E3DAC14E942F254A33824777C7
666DD2C844A1BE5491EB1D0E50E68D7D0F7974F2466E7C26A84C03EA95F7DA19
871E9ACB25073B8EC9618C13> |-
/i <1C60D8A8C9B08A9591D1BF6F045EB01A40BD589D128A02EAB473F42EA267
58A42F20266251CA749D26A2226AC6E0EBC9C8A43BCF2BFCA40407D6806DF24C
3326BC9C58B1272195C56F972B7B447B260165A3D9A9D4C39167C4D00A21BE60
245FE1394931A056C0F54A68AD8B70C33B9EA5AA2B8DDEEBF314FEE9C8F05FFE
E27EA9FDE20D36674B0951D8AFDEEAE60C9FF6F861ECDFFE74A7D9E7750B3A9E
4D4DD63BDB89D65E858BE345C2D57D33679C2873FFA48450F677> |-
/m <1C60D8A8C9B08A9421AB0EA3DDEFF188986F5F6544047EDD6984C341302C
B01956E3A2E478100BBE993B699548A5295777600AE3BFF67F880CA3C8FB6BE3
C0C63398F6AA2F26DD3E9E62455F7E38EFDC105D17C28FAF45917BEF8D9FB6F2
2BDD22455F500EF0AF8C6C4740AE82D754BF171B0B6A101CFAA9F9EF74CE69C3
7C3C8E13A7E1B17EA97002C3D65547DDD08CB36F0910A7E7A206D1B1A85CA26C
048315914F52E861C7EC5E1CC3AC8818BC87F2DAF0556E8B99930A4C7A4F420A
C807EA7773EBA98538C8F3926A27B83F8876783160AC675C4658A0DE32AC627A
FC199865C2D34F0ACDA3B9BFA288DB9A66EB6FD58868DCFD646B118E04E0FDEF
8224278FD51E07EEC5A49D642491E68F855B510ED6F303930662C177F54E3226
EE428961BE5A0A5BFA9A226B02D876E9D370C159638D118384AD704F21CED768
B1AFEFAFF040> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZWJIEM+CMMI8 /Encoding get
dup 84 /T put
dup 105 /i put
dup 109 /m put
pop
%ADOEndSubsetFont
/ZWJIEM+CMMI8*1 
[13{/.notdef}rp /gamma 45{/.notdef}rp /comma 24{/.notdef}rp /T 13{/.notdef}rp /b 
6{/.notdef}rp /i 3{/.notdef}rp /m 9{/.notdef}rp /w 136{/.notdef}rp]
ZWJIEM+CMMI8 nf
ZWJIEM+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
175.066 205.314 mo
(m)sh
%ADOBeginSubsetFont: LLIAAA+CMEX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /LLIAAA+CMEX10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 88 /summationdisplay put
def
/FontBBox {7 -2959 1387 40} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0] def
/OtherBlues [-1159 -1139] def
/BlueScale 0.04796 def
/StdHW [47] def
/StdVW [47] def
/StemSnapH [40 47] def
/StemSnapV [40 47] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/summationdisplay <1C60D8A8C9B08A978DA65CA6000E2FF227B3822E6BF59
2FAE1DA94CCD06862A15BF4A115E2D457581D1F7C2651D53244A95BDEACB9431
AD1B1E4B2F9F1F9CDAC9CF5D02DB74189D3D9500920B5A2EBEB42DEF8313D0FC
2F52E2E7F03BD5AEF93F4F867DBC2A45AEE197D649BD80CCF5B2949E4DE27736
F57468A17B8D4E7987C41A66307282E1ADE2E5114A0F9D9D6E7F0DBF96B194E7
26122C9D9CB24DEF4F37F> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZWJIEO+CMEX10 /LLIAAA+CMEX10 findfont ct_VMDictPut
/ZWJIEO+CMEX10*1 
[88{/.notdef}rp /summationdisplay 167{/.notdef}rp]
ZWJIEO+CMEX10 nf
ZWJIEO+CMEX10*1 [11.9551 0 0 -11.9551 0 0 ]msf
170.179 208.905 mo
(X)sh
ZWJIEM+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
171.961 234.096 mo
(i)sh
ZWJIEK+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
174.838 234.096 mo
(=1)
[6.58334 0 ]xsh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
189.439 220.254 mo
(\030)sh
ZWJIEM+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
194.551 222.045 mo
(i)sh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
83.6709 250.188 mo
(s.t.)
[4.61469 3.23979 4.543 0 ]xsh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
109.55 250.188 mo
(y)sh
ZWJIEK+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
115.72 245.256 mo
(\()sh
ZWJIEM+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
119.012 245.256 mo
(i)sh
ZWJIEK+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
121.889 245.256 mo
(\))sh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
125.683 250.188 mo
(\()sh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
130.226 250.188 mo
(w)sh
ZWJIEM+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
138.931 245.256 mo
(T)sh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
145.528 250.188 mo
(x)sh
ZWJIEK+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
152.179 245.256 mo
(\()sh
ZWJIEM+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
155.471 245.256 mo
(i)sh
ZWJIEK+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
158.348 245.256 mo
(\))sh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
164.806 250.188 mo
(+)sh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
176.559 250.188 mo
(b)sh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
181.532 250.188 mo
(\))sh
ZWJIEN+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf
189.396 250.188 mo
(\025)sh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
202.006 250.188 mo
(1)sh
ZWJIEN+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf
210.516 250.188 mo
( )sh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
222.46 250.188 mo
(\030)sh
ZWJIEM+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
227.617 251.979 mo
(i)sh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
231.001 250.188 mo
(;)sh
242.872 250.188 mo
(i)sh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
250.186 250.188 mo
(=)sh
262.604 250.188 mo
(1)sh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
268.45 250.188 mo
(;)sh
273.679 250.188 mo
(:)sh
278.908 250.188 mo
(:)sh
284.137 250.188 mo
(:)sh
289.393 250.188 mo
(;)sh
294.622 250.188 mo
(m)sh
109.582 267.621 mo
(\030)sh
ZWJIEM+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
114.694 269.412 mo
(i)sh
ZWJIEN+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf
121.399 267.621 mo
(\025)sh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
134.009 267.621 mo
(0)sh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
139.855 267.621 mo
(;)sh
151.735 267.621 mo
(i)sh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
159.04 267.621 mo
(=)sh
171.458 267.621 mo
(1)sh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
177.304 267.621 mo
(;)sh
182.533 267.621 mo
(:)sh
187.762 267.621 mo
(:)sh
192.991 267.621 mo
(:)sh
198.247 267.621 mo
(;)sh
203.475 267.621 mo
(m:)
[10.2336 0 ]xsh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
-16.7066 292.245 mo
(Th)
[8.44022 0 ]xsh
-2.08665 292.245 mo
(us,)
[6.50365 4.61469 0 ]xsh
16.6095 292.245 mo
(examples)
[5.20044 6.16891 5.84602 9.75529 6.50365 3.23979 5.20044 0 ]xsh
67.3959 292.245 mo
(are)
[5.84602 4.543 0 ]xsh
87.2424 292.245 mo
(no)
[6.50365 0 ]xsh
99.2681 292.245 mo
(w)sh
111.956 292.245 mo
(p)sh
118.784 292.245 mo
(ermitted)
[5.20044 4.54298 9.75531 3.23978 4.543 4.543 5.20044 0 ]xsh
166.561 292.245 mo
(to)
[4.543 0 ]xsh
181.207 292.245 mo
(ha)
[6.50366 0 ]xsh
193.232 292.245 mo
(v)sh
199.077 292.245 mo
(e)sh
208.526 292.245 mo
(\(functional\))
[4.543 3.56265 6.50366 6.50366 5.20044 4.543 3.23978 5.84601 6.50366 5.84605 3.23975 0 
]xsh
272.857 292.245 mo
(margin)
[9.75531 5.84601 4.54303 5.84601 3.23981 0 ]xsh
312.839 292.245 mo
(less)
[3.23975 5.20044 4.61469 0 ]xsh
334.766 292.245 mo
(than)
[4.54297 6.50366 5.84601 0 ]xsh
362.41 292.245 mo
(1,)
[5.84607 0 ]xsh
-16.707 306.69 mo
(and)
[5.84602 6.50365 0 ]xsh
5.99825 306.69 mo
(if)
[3.23979 0 ]xsh
16.6526 306.69 mo
(an)
[5.84602 0 ]xsh
32.8542 306.69 mo
(example)
[5.20044 6.16891 5.84602 9.75529 6.50365 3.23978 0 ]xsh
78.6299 306.69 mo
(whose)
[8.44023 6.50365 5.84602 4.61469 0 ]xsh
113.087 306.69 mo
(functional)
[3.56267 6.50365 6.50366 5.20044 4.543 3.23978 5.84601 6.50366 5.84604 0 ]xsh
167.937 306.69 mo
(margin)
[9.75528 5.84604 4.543 5.84601 3.23981 0 ]xsh
207.523 306.69 mo
(is)
[3.23978 0 ]xsh
219.229 306.69 mo
(1)sh
ZWJIEN+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf
227.631 306.69 mo
( )sh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
239.476 306.69 mo
(\030)sh
ZWJIEM+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
244.788 308.481 mo
(i)sh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
248.172 306.69 mo
(,)sh
255.282 306.69 mo
(w)sh
263.398 306.69 mo
(e)sh
272.451 306.69 mo
(w)sh
280.567 306.69 mo
(ould)
[5.84601 6.50366 3.23975 0 ]xsh
306.512 306.69 mo
(pa)
[6.50366 0 ]xsh
318.538 306.69 mo
(y)sh
328.558 306.69 mo
(a)sh
338.266 306.69 mo
(cost)
[5.20044 5.84601 4.61469 0 ]xsh
362.322 306.69 mo
(of)
[5.84601 0 ]xsh
-16.7073 321.135 mo
(the)
[4.543 6.50365 0 ]xsh
2.92371 321.135 mo
(ob)
[5.84602 0 ]xsh
15.9214 321.135 mo
(jectiv)
[3.56267 5.20044 5.20044 4.543 3.23979 0 ]xsh
43.5127 321.135 mo
(e)sh
52.1062 321.135 mo
(function)
[3.56267 6.50365 6.50365 5.20044 4.543 3.23979 5.84602 0 ]xsh
97.393 321.135 mo
(b)sh
104.221 321.135 mo
(eing)
[5.20044 3.23979 6.50365 0 ]xsh
128.395 321.135 mo
(increased)
[3.23979 6.50363 5.20044 4.543 5.20044 5.84604 4.61469 5.20044 0 ]xsh
178.631 321.135 mo
(b)sh
184.81 321.135 mo
(y)sh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
194.372 321.135 mo
(C)sh
203.596 321.135 mo
(\030)sh
ZWJIEM+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
208.896 322.926 mo
(i)sh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
212.271 321.135 mo
(.)sh
220.542 321.135 mo
(The)
[8.44022 6.50366 0 ]xsh
244.079 321.135 mo
(parameter)
[6.50366 5.84599 4.54303 5.84601 9.75531 5.20044 4.54297 5.20044 0 ]xsh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
299.444 321.135 mo
(C)sh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
312.052 321.135 mo
(con)
[5.20044 5.84607 0 ]xsh
329.278 321.135 mo
(trols)
[4.54297 4.54303 5.84601 3.23981 0 ]xsh
355.448 321.135 mo
(the)
[4.54303 6.50366 0 ]xsh
-16.7068 335.58 mo
(relativ)
[4.543 5.20044 3.23978 5.84603 4.54298 3.23979 0 ]xsh
15.7502 335.58 mo
(e)sh
25.3247 335.58 mo
(w)sh
33.441 335.58 mo
(eigh)
[5.20044 3.23979 5.84602 0 ]xsh
53.907 335.58 mo
(ting)
[4.543 3.23978 6.50366 0 ]xsh
78.4045 335.58 mo
(b)sh
85.2321 335.58 mo
(et)
[5.20044 0 ]xsh
94.6516 335.58 mo
(w)sh
102.768 335.58 mo
(een)
[5.20044 5.20044 0 ]xsh
124.028 335.58 mo
(the)
[4.54298 6.50366 0 ]xsh
144.631 335.58 mo
(t)sh
148.85 335.58 mo
(win)
[8.44022 3.23981 0 ]xsh
171.399 335.58 mo
(goals)
[5.84604 5.84601 5.84604 3.23978 0 ]xsh
201.166 335.58 mo
(of)
[5.84604 0 ]xsh
214.949 335.58 mo
(making)
[9.75528 5.84604 6.16891 3.23978 6.50366 0 ]xsh
256.673 335.58 mo
(the)
[4.54303 6.50366 0 ]xsh
ZWJIEN+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf
277.276 335.58 mo
(jj)
[3.31146 0 ]xsh
ZWJIEJ+CMMI12*1 [11.9551 0 0 -11.9551 0 0 ]msf
283.899 335.58 mo
(w)sh
ZWJIEN+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf
292.592 335.58 mo
(jj)
[3.31146 0 ]xsh
ZWJIEK+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
299.526 331.242 mo
(2)sh
ZWJIEH+CMR12~15*1 [11.9551 0 0 -11.9551 0 0 ]msf
308.616 335.58 mo
(large)
[3.23975 5.84607 4.54297 5.84601 0 ]xsh
337.666 335.58 mo
(\(whic)
[4.54303 8.44019 6.50366 3.23981 0 ]xsh
365.269 335.58 mo
(h)sh
-16.7073 350.025 mo
(w)sh
-8.59093 350.025 mo
(e)sh
.45256 350.025 mo
(sa)
[4.61469 0 ]xsh
10.5893 350.025 mo
(w)sh
22.8726 350.025 mo
(earlier)
[5.20044 5.84602 4.543 3.23978 3.23979 5.20044 0 ]xsh
58.5372 350.025 mo
(mak)
[9.75529 5.84602 0 ]xsh
79.9835 350.025 mo
(es)
[5.20044 0 ]xsh
93.6417 350.025 mo
(the)
[4.543 6.50365 0 ]xsh
113.723 350.025 mo
(margin)
[9.75529 5.84604 4.54297 5.84604 3.23978 0 ]xsh
153.3 350.025 mo
(small\))
[4.61469 9.75531 5.84601 3.23978 3.23981 0 ]xsh
188.381 350.025 mo
(and)
[5.84604 6.50363 0 ]xsh
211.078 350.025 mo
(of)
[5.84604 0 ]xsh
224.329 350.025 mo
(ensuring)
[5.20044 6.50366 4.61469 6.50363 4.543 3.23981 6.50365 0 ]xsh
271.118 350.025 mo
(that)
[4.54297 6.50366 5.84601 0 ]xsh
296.388 350.025 mo
(most)
[9.75525 5.84607 4.61469 0 ]xsh
324.99 350.025 mo
(examples)
[5.20044 6.16888 5.84601 9.75531 6.50366 3.23981 5.20044 0 ]xsh
-16.7073 364.479 mo
(ha)
[6.50365 0 ]xsh
-4.68156 364.479 mo
(v)sh
1.16328 364.479 mo
(e)sh
10.2698 364.479 mo
(functional)
[3.56267 6.50365 6.50366 5.20044 4.54298 3.23979 5.84602 6.50365 5.84602 0 ]xsh
65.1645 364.479 mo
(margin)
[9.75529 5.84602 4.543 5.84602 3.23978 0 ]xsh
104.804 364.479 mo
(at)
[5.84602 0 ]xsh
119.09 364.479 mo
(least)
[3.23979 5.20044 5.84601 4.61469 0 ]xsh
146.44 364.479 mo
(1.)
[5.84604 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/ZWJIEO+CMEX10*1 uf
/ZWJIEO+CMEX10 uf
/LLIAAA+CMEX10 uf
/ZWJIEN+CMSY10*1 uf
/ZWJIEN+CMSY10 uf
/YEKBAA+CMSY10 uf
/ZWJIEM+CMMI8*1 uf
/ZWJIEM+CMMI8 uf
/AXNBAA+CMMI8 uf
/ZWJIEL+CMBX12~29*1 uf
/ZWJIEL+CMBX12~29 uf
/ELRBAA+CMBX12~29 uf
/ZWJIEK+CMR8*1 uf
/ZWJIEK+CMR8 uf
/MZQAAA+CMR8 uf
/ZWJIEI+CMBX12*1 uf
/ZWJIEI+CMBX12 uf
/HJCBAA+CMBX12 uf
/ZWJIEH+CMR12~15*1 uf
/ZWJIEH+CMR12~15 uf
/GFNBAA+CMR12~15 uf
/ZWJIEJ+CMMI12*1 uf
/ZWJIEJ+CMMI12 uf
/BMGBAA+CMMI12 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
